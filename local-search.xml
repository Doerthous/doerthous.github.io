<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FatFS移植</title>
    <link href="/2021/01/10/FatFS%E7%A7%BB%E6%A4%8D/"/>
    <url>/2021/01/10/FatFS%E7%A7%BB%E6%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>此项目代码见<a href="https://github.com/Doerthous/dts.embedded">stm32f10x-mdk-none_fatfs</a>。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>硬件：</p><ul><li>STM32F103ZE </li><li>W25Q128</li></ul><p>软件：</p><ul><li>MDK 5.26.2.0</li><li>FatFS R0.14</li><li>STM32F10x StdPeriph Lib 3.5.0</li></ul><p>目录结构：</p><p>以下是移植过程中的项目目录结构。此处的目录结构非必须，可根据个人代码管理喜好进行。</p><pre><code class="hljs 1c">embedded├─bsp├─hal├─fs<span class="hljs-string">|  └─fatfs</span><span class="hljs-string">|     ├─ ...</span><span class="hljs-string">|     └─source</span><span class="hljs-string">|        ...</span>└─project   └─stm32f10x-mdk-none_fatfs      ├─bsp      ├─os      ├─hal      ├─fs      <span class="hljs-string">|  ├─diskio.c</span>      <span class="hljs-string">|  └─ffconf.h</span>      └─mdk</code></pre><h3 id="FatFS源码导入"><a href="#FatFS源码导入" class="headerlink" title="FatFS源码导入"></a>FatFS源码导入</h3><p>需要的文件有：</p><ul><li>ff.c</li><li>ffsystem.c</li><li>diskio.c (待实现的存储驱动)</li></ul><h3 id="实现IO驱动（diskio-c）"><a href="#实现IO驱动（diskio-c）" class="headerlink" title="实现IO驱动（diskio.c）"></a>实现IO驱动（diskio.c）</h3><p>参考FatFS源码中提供的diskio.c实现下述几个接口：</p><pre><code class="hljs C"><span class="hljs-function">DSTATUS <span class="hljs-title">disk_initialize</span> <span class="hljs-params">(BYTE pdrv)</span></span>;<span class="hljs-function">DSTATUS <span class="hljs-title">disk_status</span> <span class="hljs-params">(BYTE pdrv)</span></span>;<span class="hljs-function">DRESULT <span class="hljs-title">disk_read</span> <span class="hljs-params">(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count)</span></span>;<span class="hljs-function">DRESULT <span class="hljs-title">disk_write</span> <span class="hljs-params">(BYTE pdrv, <span class="hljs-keyword">const</span> BYTE* buff, LBA_t sector, UINT count)</span></span>;<span class="hljs-function">DRESULT <span class="hljs-title">disk_ioctl</span> <span class="hljs-params">(BYTE pdrv, BYTE cmd, <span class="hljs-keyword">void</span>* buff)</span></span>;</code></pre><p>针对W25Q128芯片，上述接口的简单实现如下：</p><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;w25qxx.h&quot;</span></span><span class="hljs-keyword">extern</span> <span class="hljs-keyword">w25qxx_t</span> w25q128;<span class="hljs-function">DSTATUS <span class="hljs-title">disk_status</span> <span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">BYTE pdrv<span class="hljs-comment">/* Physical drive nmuber to identify the drive */</span></span></span><span class="hljs-function"><span class="hljs-params">)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> RES_OK;&#125;<span class="hljs-function">DSTATUS <span class="hljs-title">disk_initialize</span> <span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">BYTE pdrv<span class="hljs-comment">/* Physical drive nmuber to identify the drive */</span></span></span><span class="hljs-function"><span class="hljs-params">)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (w25qxx_init(&amp;w25q128)) &#123;<span class="hljs-keyword">return</span> RES_OK;&#125;<span class="hljs-keyword">return</span> RES_ERROR;&#125;<span class="hljs-function">DRESULT <span class="hljs-title">disk_read</span> <span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">BYTE pdrv,<span class="hljs-comment">/* Physical drive nmuber to identify the drive */</span></span></span><span class="hljs-function"><span class="hljs-params">BYTE *buff,<span class="hljs-comment">/* Data buffer to store read data */</span></span></span><span class="hljs-function"><span class="hljs-params">DWORD sector,<span class="hljs-comment">/* Start sector in LBA */</span></span></span><span class="hljs-function"><span class="hljs-params">UINT count<span class="hljs-comment">/* Number of sectors to read */</span></span></span><span class="hljs-function"><span class="hljs-params">)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> rc;rc = w25qxx_read(&amp;w25q128, w25q128.sector_size * sector,buff, count * w25q128.sector_size);<span class="hljs-keyword">if</span> (rc) &#123;<span class="hljs-keyword">return</span> RES_OK;&#125;<span class="hljs-keyword">return</span> RES_ERROR;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> FF_FS_READONLY == 0</span><span class="hljs-function">DRESULT <span class="hljs-title">disk_write</span> <span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">BYTE pdrv,<span class="hljs-comment">/* Physical drive nmuber to identify the drive */</span></span></span><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span> BYTE *buff,<span class="hljs-comment">/* Data to be written */</span></span></span><span class="hljs-function"><span class="hljs-params">DWORD sector,<span class="hljs-comment">/* Start sector in LBA */</span></span></span><span class="hljs-function"><span class="hljs-params">UINT count<span class="hljs-comment">/* Number of sectors to write */</span></span></span><span class="hljs-function"><span class="hljs-params">)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> wc;<span class="hljs-keyword">for</span> (wc = <span class="hljs-number">0</span>; wc &lt; count; ++wc) &#123;w25qxx_erase_sector(&amp;w25q128, w25q128.sector_size * (sector + wc));&#125;wc = w25qxx_write(&amp;w25q128, w25q128.sector_size * sector,(<span class="hljs-keyword">uint8_t</span> *)buff, count * w25q128.sector_size);<span class="hljs-keyword">if</span> (wc) &#123;<span class="hljs-keyword">return</span> RES_OK;&#125;<span class="hljs-keyword">return</span> RES_ERROR;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-function">DRESULT <span class="hljs-title">disk_ioctl</span> <span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">BYTE pdrv,<span class="hljs-comment">/* Physical drive nmuber (0..) */</span></span></span><span class="hljs-function"><span class="hljs-params">BYTE cmd,<span class="hljs-comment">/* Control code */</span></span></span><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">void</span> *buff<span class="hljs-comment">/* Buffer to send/receive control data */</span></span></span><span class="hljs-function"><span class="hljs-params">)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">switch</span> (cmd) &#123; <span class="hljs-keyword">case</span> CTRL_SYNC: <span class="hljs-keyword">return</span> RES_OK;  <span class="hljs-keyword">case</span> GET_SECTOR_COUNT: *(DWORD * )buff = w25q128.capacity / w25q128.sector_size; <span class="hljs-keyword">return</span> RES_OK;  <span class="hljs-keyword">case</span> GET_SECTOR_SIZE: *(WORD * )buff = w25q128.sector_size; <span class="hljs-keyword">return</span> RES_OK;  <span class="hljs-keyword">case</span> GET_BLOCK_SIZE:  *(DWORD * )buff = <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span> RES_OK;&#125;<span class="hljs-keyword">return</span> RES_PARERR;&#125;</code></pre><p>完整文件见<a href="">diskio.c</a></p><h3 id="FatFS配置"><a href="#FatFS配置" class="headerlink" title="FatFS配置"></a>FatFS配置</h3><ul><li>设置扇区大小</li></ul><p>#define FF_MIN_SS        4096<br>#define FF_MAX_SS        4096</p><ul><li>启用MKFS接口</li></ul><p>#define FF_USE_MKFS        1</p><ul><li>不提供RTC</li></ul><p>#define FF_FS_NORTC        1</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fs_test</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">static</span> FATFS fs; <span class="hljs-comment">/* Filesystem object */</span>    <span class="hljs-keyword">static</span> FIL fil; <span class="hljs-comment">/* File object */</span>    <span class="hljs-keyword">static</span> BYTE work[FF_MAX_SS]; <span class="hljs-comment">/* Work area (larger is better for processing time) */</span>    FRESULT res; <span class="hljs-comment">/* API result code */</span>    UINT cnt;BYTE mm[<span class="hljs-number">50</span>];<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MSG_ASSERT(cond, msg) \</span><span class="hljs-keyword">if</span> (!(cond)) &#123; \<span class="hljs-built_in">printf</span>(msg<span class="hljs-string">&quot; error\n&quot;</span>); \<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; \&#125; \<span class="hljs-keyword">else</span> &#123; \<span class="hljs-built_in">printf</span>(msg<span class="hljs-string">&quot; ok\n&quot;</span>); \&#125;    <span class="hljs-comment">// 挂载</span>res = f_mount(&amp;fs, <span class="hljs-string">&quot;0:&quot;</span>, <span class="hljs-number">0</span>);MSG_ASSERT(res == FR_OK, <span class="hljs-string">&quot;mount&quot;</span>);    <span class="hljs-comment">// 新建FatFS</span>res = f_mkfs(<span class="hljs-string">&quot;0:&quot;</span>, <span class="hljs-literal">NULL</span>, work, <span class="hljs-keyword">sizeof</span>(work)); <span class="hljs-comment">//</span>MSG_ASSERT(res == FR_OK, <span class="hljs-string">&quot;mkfs&quot;</span>);    <span class="hljs-comment">// 新建文件</span>res = f_open(&amp;fil, <span class="hljs-string">&quot;0:/a.txt&quot;</span>, FA_CREATE_NEW|FA_WRITE|FA_READ);MSG_ASSERT(res == FR_OK, <span class="hljs-string">&quot;open&quot;</span>);<span class="hljs-comment">// 写文件</span>res = f_write(&amp;fil, <span class="hljs-string">&quot;Hello,World!&quot;</span>, <span class="hljs-number">12</span>, &amp;cnt);MSG_ASSERT(res == FR_OK &amp;&amp; cnt == <span class="hljs-number">12</span>, <span class="hljs-string">&quot;write&quot;</span>);    <span class="hljs-comment">// 获取文件大小</span>cnt = f_size(&amp;fil);MSG_ASSERT(cnt == <span class="hljs-number">12</span>, <span class="hljs-string">&quot;size&quot;</span>);    <span class="hljs-comment">// 读文件</span><span class="hljs-built_in">memset</span>(mm, <span class="hljs-number">0x0</span>, <span class="hljs-number">50</span>);f_lseek(&amp;fil, <span class="hljs-number">0</span>);res = f_read(&amp;fil, mm, <span class="hljs-number">12</span>, &amp;cnt);MSG_ASSERT(res == FR_OK &amp;&amp; cnt == <span class="hljs-number">12</span> &amp;&amp; <span class="hljs-built_in">memcmp</span>(mm, <span class="hljs-string">&quot;Hello,World!&quot;</span>, <span class="hljs-number">12</span>) == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;read&quot;</span>);f_close(&amp;fil);f_mount(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;0:&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://elm-chan.org/fsw/ff/00index_e.html">FatFS</a></li><li><a href="http://elm-chan.org/fsw/ff/archives.html">FatFS往期版本</a></li><li><a href="https://github.com/abbrev/fatfs.git">FatFS Github Mirror</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>文件系统</tag>
      
      <tag>FatFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32F10x+RTThread+MDK移植</title>
    <link href="/2021/01/07/STM32F10x-RTThread-MDK%E7%A7%BB%E6%A4%8D/"/>
    <url>/2021/01/07/STM32F10x-RTThread-MDK%E7%A7%BB%E6%A4%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="STM32F10x-RTThread-MDK移植"><a href="#STM32F10x-RTThread-MDK移植" class="headerlink" title="STM32F10x+RTThread+MDK移植"></a>STM32F10x+RTThread+MDK移植</h2><p>此项目代码见<a href="https://github.com/Doerthous/dts.embedded">stm32f10x-mdk-rtthread_empty</a>。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>硬件：</p><ul><li>STM32F103ZE </li></ul><p>软件：</p><ul><li>MDK 5.26.2.0</li><li>RTThread 4.0.0</li><li>STM32F10x StdPeriph Lib 3.5.0 </li></ul><p>目录结构：</p><p>以下是移植过程中的项目目录结构。此处的目录结构非必须，可根据个人代码管理喜好进行。</p><pre><code class="hljs lua">embedded├─bsp├─<span class="hljs-built_in">os</span>└─project   └─stm32f10x-mdk-rtthread_empty      ├─bsp      ├─<span class="hljs-built_in">os</span>      └─mdk</code></pre><h3 id="1-获取源码"><a href="#1-获取源码" class="headerlink" title="1. 获取源码"></a>1. 获取源码</h3><h4 id="获取BSP源码"><a href="#获取BSP源码" class="headerlink" title="获取BSP源码"></a>获取BSP源码</h4><p>下载STM32F10x对应的<a href="https://www.st.com/content/st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32-standard-peripheral-libraries/stsw-stm32054.html">bsp源码</a>，拷贝到<code>embedded/bsp</code>目录中。</p><pre><code class="hljs erlang">embedded├─bsp│  ├─CMSIS│  └─STM32F10x_StdPeriph_Driver├─os|  ...└─project   ...</code></pre><h4 id="获取OS源码"><a href="#获取OS源码" class="headerlink" title="获取OS源码"></a>获取OS源码</h4><p>获取RTThread源码可通过下面两种方式进行，本教程使用第二种方式。</p><ul><li><p>直接下载某个版本的源码</p></li><li><p>使用<code>git submodule</code>将源码仓库拉到本地，并切换到指定版本</p></li></ul><p>进入<code>embedded/os</code>目录，执行<code>git submodule add https://github.com/RT-Thread/rt-thread.git</code>，待拉取结束后，<code>embedded/os</code>目录下将新增<code>rt-thread</code>目录，即为RTThread源码。</p><pre><code class="hljs 1c">embedded├─bsp<span class="hljs-string">|  ...</span>├─os<span class="hljs-string">|  └─rt-thread</span>└─project   ...</code></pre><p>进入<code>rt-thread</code>目录，执行<code>git checkout v4.0.0</code>切换到4.0.0版本的RTThread。</p><h3 id="2-拷贝项目相关源码"><a href="#2-拷贝项目相关源码" class="headerlink" title="2. 拷贝项目相关源码"></a>2. 拷贝项目相关源码</h3><ul><li>将和本项目直接相关的源码拷贝到<code>embedded/project/stm32f10x-mdk-rtthread_empty</code>（本节及其小节内简记为<code>stm32f10x-mdk-rtthread_empty</code>）及其子目录下。</li></ul><h4 id="拷贝BSP相关源码"><a href="#拷贝BSP相关源码" class="headerlink" title="拷贝BSP相关源码"></a>拷贝BSP相关源码</h4><ul><li>将<code>stm32f10x_conf.h</code>（可在STM32F10x StdPeriph Lib 3.5.0中找到）拷贝到<code>stm32f10x-mdk-rtthread_empty/bsp</code>目录下。</li></ul><h4 id="移植或从OS源码中拷贝相关源码"><a href="#移植或从OS源码中拷贝相关源码" class="headerlink" title="移植或从OS源码中拷贝相关源码"></a>移植或从OS源码中拷贝相关源码</h4><p>由于RTThread已经有了STM32F10X芯片的例程，所以本教程直接拷贝其源码。</p><ul><li><p>将<code>embedded/os/rt-thread/bsp/stm32f10x/drivers</code>下的<code>board.c</code>及<code>board.h</code>拷贝到<code>stm32f10x-mdk-rtthread_empty/bsp</code>目录下。</p></li><li><p>将<code>embedded/os/rt-thread/bsp/stm32f10x/rtconfig.h</code>拷贝到<code>stm32f10x-mdk-rtthread_empty/os</code>目录下。</p></li><li><p>将<code>embedded/os/rt-thread/bsp/stm32f10x/applications/startup.c</code>拷贝到<code>stm32f10x-mdk-rtthread_empty/app</code>目录下。</p></li></ul><h3 id="3-新建项目"><a href="#3-新建项目" class="headerlink" title="3. 新建项目"></a>3. 新建项目</h3><p>新建keil项目，并将项目文件(.uvprojx等文件)保存到<code>embedded/project/stm32f10x-mdk-rtthread_empty/mdk</code>中。</p><h3 id="4-将源码导入项目"><a href="#4-将源码导入项目" class="headerlink" title="4. 将源码导入项目"></a>4. 将源码导入项目</h3><h4 id="导入BSP源码"><a href="#导入BSP源码" class="headerlink" title="导入BSP源码"></a>导入BSP源码</h4><p>将下述文件导入到项目的bsp目录中</p><p><code>embedded/project/stm32f10x-mdk-rtthread_empty/bsp/board.c</code></p><p><code>embedded/bsp/CMSIS/CM3/CoreSupport/core_cm3.c</code><br><code>embedded/bsp/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c</code><br><code>embedded/bsp/CMSIS/CM3/DeviceSupport/ST/STM32F10x/startup/startup_stm32f10x_hd.s</code></p><p><code>embedded/bsp/STM32F10x_StdPeriph_Driver/src/misc.c</code></p><h4 id="导入OS源码"><a href="#导入OS源码" class="headerlink" title="导入OS源码"></a>导入OS源码</h4><p>将下述文件导入到项目的os目录中，</p><p><code>embedded/os/rt-thread/libcpu/arm/cortex-m3/cpuport.c</code><br><code>embedded/os/rt-thread/libcpu/arm/cortex-m3/context_rvds.S</code><br><code>embedded/os/rt-thread/src</code>下所有.c文件</p><h4 id="导入启动代码"><a href="#导入启动代码" class="headerlink" title="导入启动代码"></a>导入启动代码</h4><p>将下述文件导入到项目的app目录中，</p><p><code>embedded/project/stm32f10x-mdk-rtthread_empty/bsp/startup.c</code></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>最终结果如下图，</p><p><img src="https://ftp.bmp.ovh/imgs/2021/01/93e69f86f18025a3.png" alt="p1"></p><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5. 配置"></a>5. 配置</h3><h4 id="配置项目include路径"><a href="#配置项目include路径" class="headerlink" title="配置项目include路径"></a>配置项目include路径</h4><p>将以下目录设置为include目录，</p><p><code>embedded/bsp/CMSIS/CM3/CoreSupport</code><br><code>embedded/bsp/CMSIS/CM3/DeviceSupport/ST/STM32F10x</code></p><p><code>embedded/bsp/STM32F10x_StdPeriph_Driver/inc</code></p><p><code>embedded/os/rt-thread/include</code></p><p><code>embedded/project/stm32f10x-mdk-rtthread_empty/bsp</code><br><code>embedded/project/stm32f10x-mdk-rtthread_empty/os</code></p><h4 id="配置BSP"><a href="#配置BSP" class="headerlink" title="配置BSP"></a>配置BSP</h4><h5 id="配置ST外设库"><a href="#配置ST外设库" class="headerlink" title="配置ST外设库"></a>配置ST外设库</h5><p>在keil中添加宏定义<code>USE_STDPERIPH_DRIVER</code>和<code>STM32F10X_HD</code>，修改<code>stm32f10x-mdk-rtthread_empty/bsp/stm32f10x_conf.h</code>配置，注释掉暂不使用的功能（非<code>misc.h</code>的头文件）。</p><pre><code class="hljs C"><span class="hljs-comment">//#include &quot;stm32f10x_adc.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_bkp.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_can.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_cec.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_crc.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_dac.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_dbgmcu.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_dma.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_exti.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_flash.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_fsmc.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_gpio.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_i2c.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_iwdg.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_pwr.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_rcc.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_rtc.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_sdio.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_spi.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_tim.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_usart.h&quot;</span><span class="hljs-comment">//#include &quot;stm32f10x_wwdg.h&quot;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;misc.h&quot;</span> <span class="hljs-comment">/* High level functions for NVIC and SysTick (add-on to CMSIS functions) */</span></span></code></pre><h4 id="配置OS"><a href="#配置OS" class="headerlink" title="配置OS"></a>配置OS</h4><p>修改<code>stm32f10x-mdk-rtthread_empty/os/rtconfig.h</code>配置。</p><pre><code class="hljs C">...<span class="hljs-comment">// 注释掉暂不使用的功能</span><span class="hljs-comment">//#define RT_USING_POSIX</span><span class="hljs-comment">//#define RT_USING_DEVICE</span><span class="hljs-comment">//#define RT_USING_FINSH</span><span class="hljs-comment">//#define RT_USING_DFS</span><span class="hljs-comment">// 每秒1000次tick</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RT_TICK_PER_SECOND 1000</span>...</code></pre><p><code>startup.c</code>:</p><pre><code class="hljs C">...<span class="hljs-comment">// 添加测试程序</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rt_init_thread_entry</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* parameter)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;rt_thread_delay(<span class="hljs-number">1000</span>);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rt_application_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">rt_thread_t</span> init_thread;    init_thread = rt_thread_create(<span class="hljs-string">&quot;init&quot;</span>,                                   rt_init_thread_entry, RT_NULL,                                   <span class="hljs-number">2048</span>, <span class="hljs-number">8</span>, <span class="hljs-number">20</span>);    <span class="hljs-keyword">if</span> (init_thread != RT_NULL)        rt_thread_startup(init_thread);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;...</code></pre><p><code>board.c</code>:</p><pre><code class="hljs C">...<span class="hljs-comment">// 注释掉无效内容</span><span class="hljs-comment">//#include &quot;stm32f10x_fsmc.h&quot;</span><span class="hljs-comment">//#include &quot;usart.h&quot;</span><span class="hljs-comment">//rt_hw_usart_init();</span><span class="hljs-comment">//rt_console_set_device(RT_CONSOLE_DEVICE_NAME);</span>...</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://www.st.com/content/st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32-standard-peripheral-libraries/stsw-stm32054.html">STM32F10x StdPeriph Lib 3.5.0</a></p></li><li><p><a href="https://www.rt-thread.org/">RTThread</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>RTOS移植</tag>
      
      <tag>MDK</tag>
      
      <tag>RTThread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ENC28J60笔记</title>
    <link href="/2020/11/06/ENC28J60%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/06/ENC28J60%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="ENC28J60笔记"><a href="#ENC28J60笔记" class="headerlink" title="ENC28J60笔记"></a>ENC28J60笔记</h1><p>本文记录了开发驱动过程中的大致实施思路以及踩过的一些坑，方便后续回顾。本文尚未完善，但已有基本思路，如后续有需要再进行细化。具体的细节还需参考芯片的数据手册。实现见<a href="https://github.com/Doerthous/dts_driver">dts_driver</a>中enc28j60*。</p><h2 id="供给协议栈的接口"><a href="#供给协议栈的接口" class="headerlink" title="供给协议栈的接口"></a>供给协议栈的接口</h2><p>和其他通讯硬件类似，ENC28J60提供给上层软件的接口基本上包括初始化接口和收发接口，其可能的形式如下（如无特殊说明，下文中提到的<strong>基本接口</strong>均指此处提到的软件接口）。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">enc28j60_init</span><span class="hljs-params">(<span class="hljs-keyword">enc28j60_t</span> *enc28j60)</span></span>;<span class="hljs-function"><span class="hljs-keyword">uint32_t</span> <span class="hljs-title">enc28j60_send</span><span class="hljs-params">(<span class="hljs-keyword">enc28j60_t</span> *enc28j60, <span class="hljs-keyword">uint8_t</span> *data, <span class="hljs-keyword">uint32_t</span> size)</span></span>;<span class="hljs-function"><span class="hljs-keyword">uint32_t</span> <span class="hljs-title">enc28j60_recv</span><span class="hljs-params">(<span class="hljs-keyword">enc28j60_t</span> *enc28j60, <span class="hljs-keyword">uint8_t</span> *data, <span class="hljs-keyword">uint32_t</span> size)</span></span>;</code></pre><p>此外，出于其他需要，可能还需实现一些管理、配置用的接口，不过我们暂时不关注这些。有了上述这些基本接口后，上层软件就可以将封装成以太网数据帧的数据发送到线缆上。关于以太网数据帧的说明在本文后续有简单地涉及，现在我们先把它当成黑盒子，划清驱动的范围，重点考虑如何实现这些接口。</p><h2 id="解剖ENC28J60"><a href="#解剖ENC28J60" class="headerlink" title="解剖ENC28J60"></a>解剖ENC28J60</h2><p>在考虑实现基本接口前，我们需要先熟悉一下ENC28J60。</p><p>通过查阅其手册可知，ENC28J60身提供了一个SPI接口和一个中断信号INT（其他暂不考虑）作为和外部设备通信的接口，其内部包含有用于各类特殊用途的<strong>寄存器</strong>和用于存放数据帧的硬件缓冲区（<strong>以太网缓冲</strong>），通过SPI接口，我们可以直接或间接地访问这些内存。</p><pre><code class="hljs gherkin">                                 ENC28J60                          +-----------------------------+                      |<span class="hljs-string">  +-------+  +------------+  </span>|                      |<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|                      |<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|                   +--+--+  ETH  |<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|                   |<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|                   |<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  Ethernet  </span>|<span class="hljs-string">  </span>|                   |<span class="hljs-string">  </span>|<span class="hljs-string">  +-------+  </span>|<span class="hljs-string">   Buffer   </span>|<span class="hljs-string">  </span>|                   +--+-------------+            |<span class="hljs-string">  </span>|+------------+     |<span class="hljs-string">  </span>|<span class="hljs-string">  +-------+  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>||<span class="hljs-string"> Host       </span>|<span class="hljs-string"> SPI </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>||<span class="hljs-string"> Controller +-----+--+--+  MAC  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|+------------+     |<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">  </span>|                   |<span class="hljs-string">  </span>|<span class="hljs-string">  +-------+  +------------+  </span>|                   |<span class="hljs-string">  </span>|<span class="hljs-string">  +-------+  +------------+  </span>|                   +--+--+  MII  +--+    PHY     |<span class="hljs-string">  </span>|                      |<span class="hljs-string">  +-------+  +------------+  </span>|                      +-----------------------------+</code></pre><h3 id="SPI接口"><a href="#SPI接口" class="headerlink" title="SPI接口"></a>SPI接口</h3><p>ENC28J60的SPI接口仅支持mode(0,0)模式，即<strong>空闲时时钟处于低电平</strong>，<strong>在第一个边沿采样</strong>。</p><p>ENC28J60的指令集包括：</p><ol><li>读控制寄存器指令（Read Control Register Command, RCR）</li><li>写控制寄存器指令（Write Control Register Command, WCR）</li><li>读以太网缓冲指令（Read Buffer Memory Command, RBM）</li><li>写以太网缓冲指令（Write Buffer Memory Command, WBM）</li><li>置位指令（Bit Field Set Command, BFS）</li><li>清零指令（Bit Field Clear Command, BFC）</li><li>系统复位指令（System Reset Command, SRC）</li></ol><p>其通信格式为：指令码(3 bits)+寄存器地址或固定值(5 bits)+数据(N bytes)。</p><table><thead><tr><th>指令</th><th>指令码</th><th>十六进制</th><th>地址/参数</th></tr></thead><tbody><tr><td>RCR</td><td>000b</td><td>00h</td><td>address</td></tr><tr><td>WCR</td><td>010b</td><td>02h</td><td>address</td></tr><tr><td>RBM</td><td>001b</td><td>01h</td><td>11010b</td></tr><tr><td>WBM</td><td>011b</td><td>03h</td><td>11010b</td></tr><tr><td>BFS</td><td>100b</td><td>04h</td><td>address</td></tr><tr><td>BFC</td><td>101b</td><td>05h</td><td>address</td></tr><tr><td>SRC</td><td>111b</td><td>07h</td><td>11111b</td></tr></tbody></table><p>具体时序见ENC28J60的数据手册。需要注意的是BFS和BFC指令只能用于ETH寄存器。另外，除了RBM和WBM指令，其他指令貌似均不能连续操作寄存器。</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_RCR(addr)   (0x1F &amp; (addr))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_RBM         ((0x01 &lt;&lt; 5)|(0x1A))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_WCR(addr)   ((0x02 &lt;&lt; 5)|(0x1F &amp; (addr)))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_WBM         ((0x03 &lt;&lt; 5)|(0x1A))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_BFS(addr)   ((0x04 &lt;&lt; 5)|(0x1F &amp; (addr)))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_BFC(addr)   ((0x05 &lt;&lt; 5)|(0x1F &amp; (addr)))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CMD_SRC         (0xFF)</span></code></pre><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>ENC28J60的寄存器大致可分为四类，包括ETH寄存器、MAC寄存器、MII寄存器以及PHY寄存器，其中除了PHY寄存器需要通过MII寄存器进行间接访问外，其余的寄存器均可以通过SPI接口进行访问。</p><p>ENC28J60的寄存器集合又被分到了四个区域（Bank），每个Bank有32个寄存器，所以每个Bank中的寄存器都可以通过一个5bit长的地址进行寻址，结合前边的SPI命令可知，每个SPI都可以寻址到任意一个Bank中的所有寄存器。</p><p>另外，每个Bank最后的5个寄存器（<code>EIE</code>、<code>EIR</code>、<code>ESTAT</code>、<code>ECON2</code>、<code>ECON1</code>）都相同，即无论在哪个Bank中，<code>EIE</code>（或其他四个）都是同一个，这样一来，访问这些寄存器就无需频繁地切换Bank。</p><p>Bank由<code>ECON1</code>中的两个比特<code>ECON1.BSEL</code>指定。所以，要想访问寄存器，一般要先选择Bank，在选择Bank中的寄存器。</p><pre><code class="hljs gherkin">      Bank0        Bank1        Bank2        Bank3     +----------+ +----------+ +----------+ +----------+0x00 |<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|     +----------+ +----------+ +----------+ +----------+     |<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|     |<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|     |<span class="hljs-string"> ...      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ...      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ...      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ...      </span>|     |<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|     |<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|     +----------+ +----------+ +----------+ +----------+0x1B |<span class="hljs-string"> EIE      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIE      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIE      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIE      </span>|     +----------+ +----------+ +----------+ +----------+0x1C |<span class="hljs-string"> EIR      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIR      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIR      </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> EIR      </span>|     +----------+ +----------+ +----------+ +----------+0x1D |<span class="hljs-string"> ESTAT    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ESTAT    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ESTAT    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ESTAT    </span>|     +----------+ +----------+ +----------+ +----------+0x1E |<span class="hljs-string"> ECON2    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON2    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON2    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON2    </span>|     +----------+ +----------+ +----------+ +----------+0x1F |<span class="hljs-string"> ECON1    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON1    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON1    </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ECON1    </span>|     +----------+ +----------+ +----------+ +----------+</code></pre><h3 id="以太网缓冲区"><a href="#以太网缓冲区" class="headerlink" title="以太网缓冲区"></a>以太网缓冲区</h3><p>ENC28J60有一个8K的以太网缓冲，主要用来存储以太网数据帧数据。</p><p>该缓冲可通过两个寄存器<code>ERDPT</code>与<code>EWRPT</code>进行访问。<code>EWRPT</code>指向的位置是将要写入的位置，<code>ERDPT</code>则是将要读取的位置，结合这两个寄存器，主控可以通过<code>Read Buffer Memory</code>和<code>Read Buffer Memory</code>SPI指令来读写整个缓冲区。</p><p>通过将<code>ECON2</code>寄存器的<code>AUTOINC</code>位设置为1（<code>ECON2.AUTOINC</code>的复位值为1），还可以使这两个指针自动递增。</p><pre><code class="hljs c">            +-----------+            |           |  <span class="hljs-number">0x0000</span>            +-----------+ERDPT +---&gt; |           |  <span class="hljs-number">0x0001</span>            +-----------+            |           |            |    ...    |            |           |            +-----------+EWRPT +---&gt; |           |  <span class="hljs-number">0x1FFE</span>            +-----------+            |           |  <span class="hljs-number">0x1FFF</span>            +-----------+</code></pre><p>整个8K缓冲又被分为RX与TX两部分，通过设置寄存器<code>ERXSTPT</code>与<code>ERXNDPT</code>来划分RX缓冲，其余皆为TX缓冲。根据[1]中的Issue#5的描述，<code>ERXSTPT</code>必须设置为0x0000，所以整个缓冲的结构和下图类似。</p><p>在ENC28J60内部存在一个主控无法访问的指向RX区域的寄存器<code>ERXWRPT</code>。该寄存器的作用和<code>EWRPT</code>类似，作为ENC28J60接收数据时的写指针，即当收到以太网数据时，ENC28J60会将数据拷贝到<code>ERXWRPT</code>指向的以太网缓冲内存，并自动移动该指针。另外，还有个<code>ERXRDPT</code>寄存器，该寄存器用来作为RX队列的哨兵节点，标识RX队列的头部。</p><pre><code class="hljs c">              +-----------+  --+-----ERXSTPT +---&gt; |           |    ^              +-----------+    |              |           |    |              |    ...    |    |RX区域              |           |    |              +-----------+    |ERXNDPT +---&gt; |           |    v              +-----------+  --------              |           |    ^              |    ...    |    |              |           |    |TX区域              +-----------+    |              |           |    v              +-----------+  --+-----</code></pre><blockquote><p>注：ST（Start），ND（End）</p></blockquote><h4 id="TX缓冲指针"><a href="#TX缓冲指针" class="headerlink" title="TX缓冲指针"></a>TX缓冲指针</h4><p>前边说过<code>ERXSTPT</code>和<code>ERXNDPT</code>确定了RX缓冲的范围，而在ENC28J60提供的寄存器中，还存在<code>ETXSTPT</code>和<code>ETXNDPT</code>两个寄存器。但是这两个寄存器的作用并非用于确定TX缓冲的范围（RX缓冲范围确定后，剩余的都是TX缓冲），而是用来确定当前要发送的数据的范围。当把<code>ECON1.TXRTS</code>置1以启动发送后，ENC28J60会把从<code>ETXSTPT</code>到<code>ETXNDPT</code>的地方判定为当前需要发送的数据，接着把数据发送到线缆上。</p><pre><code class="hljs gherkin">    TX FIFO+--------------+|<span class="hljs-string"> +----------+ &lt;---ETXSTPT</span>|<span class="hljs-string"> </span>|<span class="hljs-string">ctrl byte </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> +----------+ </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> </span>|<span class="hljs-string"> packet1  </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> +----------+ &lt;---ETSNDPT</span>|<span class="hljs-string">      ...     </span>||<span class="hljs-string"> +----------+ </span>||<span class="hljs-string"> </span>|<span class="hljs-string">ctrl byte </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> +----------+ </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> </span>|<span class="hljs-string"> packet2  </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> +----------+ </span>||<span class="hljs-string">      ...     </span>|+--------------+</code></pre><h4 id="RX队列"><a href="#RX队列" class="headerlink" title="RX队列"></a>RX队列</h4><p>ENC28J60的数据接收采用队列的形式，它在接收到的数据包前边添加了下一个数据包的指针（Next Packet Pointer），在RX缓冲中，其呈现了下述的形式。</p><p>我们通过<code>Read Buffer Memory</code>命令读取RX缓冲中的数据时，需要先设置<code>ERXRDPT</code>来确定读取的起始位置。在读取RX数据后，需要把Next Packet Pointer保存下来，以便读取下一个数据包时用于设置<code>ERXRDPT</code>。需要注意，<code>ERXRDPT</code>必须设置成奇数地址，而Next Packet Pointer总是偶数地址。</p><pre><code class="hljs gherkin">    RX FIFO+--------------+|<span class="hljs-string"> +----------+ </span>||<span class="hljs-string"> </span>|<span class="hljs-string"> next ptr </span>|<span class="hljs-string">-+---+</span>|<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">  packet  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string">              </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> +----------&lt;-+---+</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> next ptr </span>|<span class="hljs-string">-+---+</span>|<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">  packet  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string">              </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> +----------&lt;-+---+</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> next ptr </span>|<span class="hljs-string">-+---+</span>|<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">  packet  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> </span>|<span class="hljs-string">          </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   </span>||<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">   </span>||<span class="hljs-string">      ...   &lt;-+---+</span><span class="hljs-string">+--------------+</span></code></pre><h4 id="RX缓冲写入细节"><a href="#RX缓冲写入细节" class="headerlink" title="RX缓冲写入细节"></a>RX缓冲写入细节</h4><p>ENC28J60接收线缆上的数据的伪代码大致如下，需要注意的是<code>erxwrpt == erxrdpt</code>的情况，该情况下，ENC28J60将判定缓冲区无多余空间存储新数据，之后将不再接收新数据，直到有空余的空间出现。</p><pre><code class="hljs properties"><span class="hljs-attr">struct</span> <span class="hljs-string">&#123;</span>    <span class="hljs-attr">u8</span> <span class="hljs-string">*erxstpt;</span>    <span class="hljs-attr">u8</span> <span class="hljs-string">*erxndpt;</span>    <span class="hljs-attr">u8</span> <span class="hljs-string">*erxrdpt;</span>    <span class="hljs-attr">u8</span> <span class="hljs-string">*erxwrpt;</span><span class="hljs-meta">&#125;</span> <span class="hljs-string">rx_fifo;</span><span class="hljs-meta">enc28j60_write_data_to_rx_fifo(data,</span> <span class="hljs-string">size)</span>    <span class="hljs-attr">for</span> <span class="hljs-string">i=0~(size-1)</span>        <span class="hljs-attr">if</span> <span class="hljs-string">erxwrpt == erxrdpt:</span>            <span class="hljs-attr">rx</span> <span class="hljs-string">abort</span>        <span class="hljs-meta">*erxwrpt</span> = <span class="hljs-string">data[i]</span>        <span class="hljs-attr">increase</span> <span class="hljs-string">erxwrpt (make sure erxwrpt between erxstpt and erxndpt)</span></code></pre><p>ENC28J60把帧数据写到缓冲后会将<code>PKTCNT</code>加一，主控可通过查询<code>PKTCNT</code>判断当前缓冲中是否有数据帧，当主控从缓冲中读取一帧数据后，还需通过将<code>ECON2.PKTDEC</code>置1来递减<code>PKTCNT</code>，否则，一旦<code>PKTCNT</code>递增到255后，ENC28J60将不再接收线缆上的新数据帧。</p><h4 id="通过以太网缓冲与ENC28J60交互"><a href="#通过以太网缓冲与ENC28J60交互" class="headerlink" title="通过以太网缓冲与ENC28J60交互"></a>通过以太网缓冲与ENC28J60交互</h4><p>以太网缓冲区除了用来存放以太网数据帧外，还会放一些状态和控制数据。包括接收状态向量、发送状态向量以及发送控制字节。</p><p>主控在发送数据前，要先往发送缓冲区中写入一个控制字节，然后才将以太网帧数据写入到发送缓冲区。发送完一包数据后，ENC28J60会在包的尾部写入七个字节的发送状态向量，用于指示该包的发送状态。同样，收数据时，ENC28J60在往接收缓冲区中写入以太网帧数据前会先写入六个字节的接收状态向量。</p><h5 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h5><p>发送数据的过程如下所示，首先1)主控向缓冲区写入一个<strong>控制字节</strong>，然后2)写入以太网数据帧，启动发送并且发送完毕后，ENC28J60会3)在包尾部添加七个字节的<strong>发送状态向量</strong>，用于指示发送的状态及结果。</p><pre><code class="hljs gherkin">HostController      TX Buffer        ENC28J60            +---------------+            |<span class="hljs-string">      ...      </span>|            |<span class="hljs-string"> +-----------+ </span>|    1)--------+ ctrl byte |<span class="hljs-string"> </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string"> </span>|<span class="hljs-string">           </span>|<span class="hljs-string"> </span>|    2)--------+  packet   |<span class="hljs-string"> </span>|            |<span class="hljs-string"> </span>|<span class="hljs-string">           </span>|<span class="hljs-string"> </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string"> +-----------+ </span>|<span class="hljs-string">    </span><span class="hljs-string">            </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> transmit  +------3)</span><span class="hljs-string">            </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   status  </span>|<span class="hljs-string"> </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string">      ...      </span>|            +---------------+</code></pre><h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><p>接收数据的过程如下所示，当有数据收到后，ENC28J60会1)先往缓冲区中写入一个<strong>接收状态向量</strong>，2)然后才写入真正的以太网数据帧。在收到信号或查询到有数据时，主控依次3)、4)读取<strong>接收状态向量</strong>和以太网数据帧。</p><pre><code class="hljs gherkin">HostController      RX Buffer        ENC28J60            +---------------+            |<span class="hljs-string">      ...      </span>|            |<span class="hljs-string"> +-----------+ </span>|<span class="hljs-string">    </span><span class="hljs-string">    3)--------+ receive   +------1)</span><span class="hljs-string">            </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   status  </span>|<span class="hljs-string"> </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string"> </span>|<span class="hljs-string">           </span>|<span class="hljs-string"> </span>|    4)--------+  packet   +------2)            |<span class="hljs-string"> </span>|<span class="hljs-string">           </span>|<span class="hljs-string"> </span>|            |<span class="hljs-string"> +-----------+ </span>|            |<span class="hljs-string">      ...      </span>|            +---------------+</code></pre><h2 id="基本接口实现思路"><a href="#基本接口实现思路" class="headerlink" title="基本接口实现思路"></a>基本接口实现思路</h2><p>在参考了ENC20J68数据手册，并对ENC20J68的行为进行大致分析后，三个接口的实现思路如下。</p><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><ol><li>初始化以太网缓冲（RX初始化ST、ND、RDPT）</li><li>设置接收过滤器（RX filter）</li><li>等待晶振稳定（修改MAC和PHY寄存器需等待时钟稳定）</li><li>MAC初始化</li><li>PHY初始化</li></ol><blockquote><p>Reset后初始化，一般初始化后，后续无需再初始化。</p></blockquote><h3 id="发送流程"><a href="#发送流程" class="headerlink" title="发送流程"></a>发送流程</h3><ol><li>设置EWRPT指针</li><li>将以太网数据帧拷贝到以太网缓冲中</li><li>设置ETXSTPT和ETXNDPT指针</li><li>启动传输</li><li>等待传输完毕</li><li>读取传输状态向量，判断传输状态</li></ol><h3 id="接收流程"><a href="#接收流程" class="headerlink" title="接收流程"></a>接收流程</h3><ol><li>检查PKTCNT寄存器，判断是否有收到数据包</li><li>设置Next Packet Pointer</li><li>读取接收状态向量</li><li>读取以太网数据帧</li><li>保存Next Packet Pointer</li><li>递减PKTCNT寄存器</li></ol><h2 id="ENC28J60的功能点"><a href="#ENC28J60的功能点" class="headerlink" title="ENC28J60的功能点"></a>ENC28J60的功能点</h2><h3 id="以太网数据帧"><a href="#以太网数据帧" class="headerlink" title="以太网数据帧"></a>以太网数据帧</h3><ul><li>发送时可通过控制<code>MACON3.PADCFG</code>使其自动添加CRC以及Padding。</li><li>接收时通过设置<code>ERXFCON.CRCEN</code>对收到的帧进行CRC校验。</li></ul><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>ENC28J60有多个中断源和一个总中断开关，中断配置主要涉及了<code>EIE</code>，<code>EIR</code>以及<code>ESTAT</code>寄存器。本文只关注TXIE、PKTIE、TXERIE、RXERIE这四个中断，以及INTE总中断开关。</p><p>ENC28J60数据手册中有一张清晰表示了其中断逻辑的逻辑门图，此处简要用代码表述了其原理，更多信息请参考ENC28J60的数据手册。</p><pre><code class="hljs gradle"><span class="hljs-keyword">if</span> (TXIE and TXIF) <span class="hljs-comment">// 发送结束中断开关 及 发送结束中断标志</span>    <span class="hljs-keyword">INT</span> = <span class="hljs-keyword">true</span><span class="hljs-keyword">if</span> (PKTIE and PKTIF) <span class="hljs-comment">// 收到PKT中断开关 及 其标志</span>    <span class="hljs-keyword">INT</span> = <span class="hljs-keyword">true</span><span class="hljs-keyword">if</span> (TXERTIE and TXERIF) <span class="hljs-comment">// 发送异常中断开关 及 其标志</span>    <span class="hljs-keyword">INT</span> = <span class="hljs-keyword">true</span><span class="hljs-keyword">if</span> (RXERTIE and RXERIF) <span class="hljs-comment">// 接收异常中断开关 及 其标志</span>    <span class="hljs-keyword">INT</span> = <span class="hljs-keyword">true</span>... <span class="hljs-comment">// 其他中断信号</span><span class="hljs-keyword">if</span> (INTIE &amp;&amp; <span class="hljs-keyword">INT</span>) <span class="hljs-comment">// 总中断开关 及 其标志</span>    拉低<span class="hljs-keyword">INT</span>信号线</code></pre><h3 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h3><ul><li>半双工模式下，可以通过控制<code>EFLOCON.FCEN0</code>来一直发送前导码，以占用信道，类似在说，我在用。设置<code>ECON1.TXRTS</code>后（启动发送），有一个间隔，间隔结束后开始发送packet。</li></ul><h2 id="容易掉坑的地方"><a href="#容易掉坑的地方" class="headerlink" title="容易掉坑的地方"></a>容易掉坑的地方</h2><ul><li><p>RX缓冲必须从0x0000地址起始，即<code>ERXSTPT</code>必须设置为0x0000。</p></li><li><p><code>ERXRDPT</code>必须设置成奇数地址。</p></li><li><p>SPI时序不匹配或时钟频率过低、dummy byte没有处理、bank不正确、晶振不稳定可能导致寄存器读写不正常。</p></li><li><p>复位后要等待晶振稳定（通过<code>ESTAT.CLKRDY</code>判断）才能收发数据或访问MAC、MII、PHY寄存器。</p></li><li><p><code>Bit Field Set</code>、<code>Bit Field Clear</code>指令中，别多传Data，有些Data会跑到下一个地址，导致程序逻辑错误。比如，往<code>ECON2.PKTDEC</code>写1时，多写一次会写到下一个地址相同位的地方，即ECON1.RXRST，导致接收异常。</p></li><li><p><code>Bit Field Set</code>、<code>Bit Field Clear</code>指令只能用于ETH寄存器。</p></li><li><p>当<code>MACON3.FULDPX</code>和<code>PHCON1.PDPXMD</code>所指示的全/半双工状态不相同时，芯片处于未定义状态。</p></li><li><p>接收逻辑使能（<code>ECON1.RXEN</code>为1）时，不可以改变<code>ERXST</code>和<code>ERXND</code>指针。</p></li><li><p>更改<code>ERXRDPT</code>时，必须先写<code>ERXRDPTL</code>，后写<code>ERXRDPTH</code>。</p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="以太网帧结构"><a href="#以太网帧结构" class="headerlink" title="以太网帧结构"></a>以太网帧结构</h3><p>以太网帧结构按序包括下述字段：</p><p>目标MAC地址、源MAC地址、类型/长度、有些载荷、填充数据、CRC校验。</p><p>CRC校验的内容包括目标MAC地址、源MAC地址、类型/长度、有些载荷、填充数据。一般和IEEE 802.3标准相兼容的帧的长度在64和1518个字节之间，所以当有效载荷小于46（46+6+6+2+4）个字节时需要填充数据。</p><p>另外，除了在发送以太网帧之前，PHY还会发送前导码和帧分隔。</p><h3 id="Linux下收发以太网帧"><a href="#Linux下收发以太网帧" class="headerlink" title="Linux下收发以太网帧"></a>Linux下收发以太网帧</h3><p><a href="https://stackoverflow.com/questions/24355597/linux-when-sending-ethernet-frames-the-ethertype-is-being-re-written">源码见本问题回答</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>全双工模式中的暂停控制帧（IEEE 802.3）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>[1] <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/80349c.pdf">ENC28J60 Silicon Errata and Data Sheet Clarification</a></p></li><li><p>[2] <a href="https://pdf1.alldatasheet.com/datasheet-pdf/view/515823/MICROCHIP/ENC28J60.html">ENC28J60 Data Sheet</a></p></li><li><p>[3] <a href="https://stackoverflow.com/questions/24355597/linux-when-sending-ethernet-frames-the-ethertype-is-being-re-written">Linux: When sending Ethernet frames the ethertype is being re-written</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python ArgParse笔记</title>
    <link href="/2020/11/02/Python-ArgParse%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/02/Python-ArgParse%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="可选参数和位置参数"><a href="#可选参数和位置参数" class="headerlink" title="可选参数和位置参数"></a>可选参数和位置参数</h2><p>可选参数由类似<code>add_argument(&#39;-f&#39;,&#39;--foo&#39;)</code>的语句创建，<code>add_argument(&#39;foo&#39;)</code>创建位置参数。当调用<code>parse_args()</code>时，带<code>-</code>前缀的将被识别为可选参数，剩余的被识别为位置参数。</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>通过调用<a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method">add_argument</a>可设置参数的一些属性，如默认值、参数类型等。</p><h2 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h2><p>子命令通过<a href="https://docs.python.org/3/library/argparse.html#sub-commands">add_subparsers</a>创建，</p><pre><code class="hljs python">parser = argparse.ArgumentParser()subparsers = parser.add_subparsers()parser_a = subparsers.add_parser(<span class="hljs-string">&#x27;cmd1&#x27;</span>)<span class="hljs-comment"># parser_a.add_argument ...</span>parser_b = subparsers.add_parser(<span class="hljs-string">&#x27;cmd2&#x27;</span>)<span class="hljs-comment"># parser_b.add_argument ...</span></code></pre><p>用法上，除了在调用时需指定子命令外（如<code>python p.py cmd1 ...</code>），其余基本相同。</p><h2 id="一些需求"><a href="#一些需求" class="headerlink" title="一些需求"></a>一些需求</h2><h3 id="两种执行模式"><a href="#两种执行模式" class="headerlink" title="两种执行模式"></a>两种执行模式</h3><ol><li><code>python p.py</code>执行一种操作</li><li><code>python p.py -s</code>执行另一种操作</li></ol><p>实现</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparseparser = argparse.ArgumentParser()parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>)args = parser.parse_args()<span class="hljs-keyword">if</span> args.s:    print(<span class="hljs-string">&#x27;python p.py -s&#x27;</span>)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&#x27;python p.py&#x27;</span>)</code></pre><h3 id="互斥的多模式"><a href="#互斥的多模式" class="headerlink" title="互斥的多模式"></a>互斥的多模式</h3><ol><li><code>python p.py</code>执行一种操作</li><li><code>python p.py s</code>执行另一种操作</li><li><code>python p.py r</code>执行另一种操作</li><li>1,2,3互斥</li></ol><p>实现</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_r</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py r&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_s</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py s&#x27;</span>)parser = argparse.ArgumentParser()subparsers = parser.add_subparsers()parser_s = subparsers.add_parser(<span class="hljs-string">&#x27;s&#x27;</span>)parser_s.set_defaults(func=func_s)parser_r = subparsers.add_parser(<span class="hljs-string">&#x27;r&#x27;</span>)parser_r.set_defaults(func=func_r)args = parser.parse_args()<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(args, <span class="hljs-string">&#x27;func&#x27;</span>):    args.func = funcargs.func(args)</code></pre><h3 id="带参命令"><a href="#带参命令" class="headerlink" title="带参命令"></a>带参命令</h3><ol><li><code>python p.py</code>执行一种操作</li><li><code>python p.py s</code>执行另一种操作</li><li><code>python p.py r</code>执行另一种操作</li><li>1,2,3互斥</li><li><code>python p.py r [-t title]</code>提供可选参数<code>title</code>, 默认为<code>&#39;&#39;</code></li></ol><p>实现</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_r</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py r title:%s&#x27;</span> % args.title)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_s</span>(<span class="hljs-params">args</span>):</span>    print(<span class="hljs-string">&#x27;python p.py s&#x27;</span>)parser = argparse.ArgumentParser()subparsers = parser.add_subparsers()parser_s = subparsers.add_parser(<span class="hljs-string">&#x27;s&#x27;</span>)parser_s.set_defaults(func=func_s)parser_r = subparsers.add_parser(<span class="hljs-string">&#x27;r&#x27;</span>)parser_r.set_defaults(func=func_r)parser_r.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--title&#x27;</span>, type=str, default=<span class="hljs-string">&#x27;&#x27;</span>, required=<span class="hljs-literal">False</span>)args = parser.parse_args()<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(args, <span class="hljs-string">&#x27;func&#x27;</span>):    args.func = funcargs.func(args)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>使用记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>已知前（后）序及中序遍历，求后（前）序</title>
    <link href="/2020/10/14/%E5%B7%B2%E7%9F%A5%E5%89%8D%EF%BC%88%E5%90%8E%EF%BC%89%E5%BA%8F%E5%8F%8A%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%8C%E6%B1%82%E5%90%8E%EF%BC%88%E5%89%8D%EF%BC%89%E5%BA%8F/"/>
    <url>/2020/10/14/%E5%B7%B2%E7%9F%A5%E5%89%8D%EF%BC%88%E5%90%8E%EF%BC%89%E5%BA%8F%E5%8F%8A%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%8C%E6%B1%82%E5%90%8E%EF%BC%88%E5%89%8D%EF%BC%89%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>已知二叉树的前/后序及中序遍历，求后/前序遍历。</p><p>典型题目：已知二叉树中序遍历为ADEFGHMZ，后序遍历为AEFDHZMG，求前序遍历。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>前中后序列遍历的基本概念 =&gt; 前中后序遍历的规律 =&gt; 算法思路</p><h3 id="前中后序遍历的基本概念"><a href="#前中后序遍历的基本概念" class="headerlink" title="前中后序遍历的基本概念"></a>前中后序遍历的基本概念</h3><pre><code class="hljs C">  P / \L   R</code></pre><p>前序（pre-order）: PLR<br>中序（in-order）: LPR<br>后序（post-order）: LRP</p><p>序指的是根节点在左右子树中的位置：根左右、左根右、左右根。</p><h3 id="前中后序列遍历的规律"><a href="#前中后序列遍历的规律" class="headerlink" title="前中后序列遍历的规律"></a>前中后序列遍历的规律</h3><ul><li>前序遍历：如果在同一颗树内，最前边的节点是根节点。</li><li>中序遍历：如果在同一颗树内，根左边的是左子树，根右边的是右子树。</li><li>后序遍历：如果在同一颗树内，最后边的节点是根节点。</li></ul><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><ol><li>通过前序（后序）遍历，找到树的根节点。</li><li>通过根节点及中序遍历，划分左右子树。</li><li>对左右子树递归进行步骤1、2，直到子树划分完毕。</li></ol><p>总结：找根节点、划分左右子树。</p><h4 id="人型电脑实验"><a href="#人型电脑实验" class="headerlink" title="人型电脑实验"></a>人型电脑实验</h4><p>已知二叉树中序遍历为ADEFGHMZ，后序遍历为AEFDHZMG，求前序遍历。</p><h5 id="解"><a href="#解" class="headerlink" title="解"></a>解</h5><p>1th，看后序得知根节点为G，看中序划分左子树ADEF和右子树HMZ</p><pre><code class="hljs latex">    G  /   <span class="hljs-tag">\</span>ADEF  HMZ</code></pre><p>2th</p><pre><code class="hljs dns">  D / \<span class="hljs-keyword">A</span>  EF</code></pre><p>3th</p><pre><code class="hljs mathematica">  F /<span class="hljs-keyword">E</span></code></pre><p>4th</p><pre><code class="hljs latex">  M / <span class="hljs-tag">\</span>H   Z</code></pre><p>tree</p><pre><code class="hljs latex">     G   /   <span class="hljs-tag">\</span>  D     M / <span class="hljs-tag">\<span class="hljs-name"> </span></span>  / <span class="hljs-tag">\</span>A   F H   Z   /  E</code></pre><p>故前序遍历为：GDAFEMHZ</p><h2 id="解-1"><a href="#解-1" class="headerlink" title="解"></a>解</h2><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><pre><code class="hljs matlab">v bt_preorder(t, op)v bt_inorder(t, op)v bt_postorder(t, op)t bt_solve_from_inpostorder(in, in_len post, post_len)&#123;    r = post[post_len<span class="hljs-number">-1</span>]    <span class="hljs-built_in">find</span> in[<span class="hljs-built_in">i</span>] == r    r-&gt;left = bt_solve_from_inpostorder(in, <span class="hljs-built_in">i</span>, post, <span class="hljs-built_in">i</span>)    r-&gt;right = bt_solve_from_inpostorder(in+<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>, in_len-<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>,         post+<span class="hljs-built_in">i</span>, post_len-<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)    <span class="hljs-keyword">return</span> r;&#125;t bt_solve_from_inpreorder(in, in_len pre, pre_len)&#123;    r = pre[<span class="hljs-number">0</span>]    <span class="hljs-built_in">find</span> in[<span class="hljs-built_in">i</span>] == r    r-&gt;left = bt_solve_from_inpreorder(in, <span class="hljs-built_in">i</span>, pre+<span class="hljs-number">1</span>, <span class="hljs-built_in">i</span>)    r-&gt;right = bt_solve_from_inpreorder(in+<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>, in_len-<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>,         pre+<span class="hljs-number">1</span>+<span class="hljs-built_in">i</span>, pre_len-<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)    <span class="hljs-keyword">return</span> r;&#125;</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bt</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">char</span> key;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bt</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bt</span> *<span class="hljs-title">right</span>;</span>&#125; <span class="hljs-keyword">bt_t</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt_preorder</span><span class="hljs-params">(<span class="hljs-keyword">bt_t</span> *bt, <span class="hljs-keyword">void</span> (*op)(<span class="hljs-keyword">bt_t</span> *))</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (bt) &#123;        op(bt);        bt_preorder(bt-&gt;left, op);        bt_preorder(bt-&gt;right, op);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt_inorder</span><span class="hljs-params">(<span class="hljs-keyword">bt_t</span> *bt, <span class="hljs-keyword">void</span> (*op)(<span class="hljs-keyword">bt_t</span> *))</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (bt) &#123;        bt_inorder(bt-&gt;left, op);        op(bt);        bt_inorder(bt-&gt;right, op);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt_postorder</span><span class="hljs-params">(<span class="hljs-keyword">bt_t</span> *bt, <span class="hljs-keyword">void</span> (*op)(<span class="hljs-keyword">bt_t</span> *))</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (bt) &#123;        bt_postorder(bt-&gt;left, op);        bt_postorder(bt-&gt;right, op);        op(bt);    &#125;&#125;<span class="hljs-keyword">bt_t</span> *bt_solve_from_inpostorder(    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_len, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *post, <span class="hljs-keyword">int</span> post_len)&#123;    <span class="hljs-keyword">if</span> (post_len &gt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">int</span> i;        <span class="hljs-keyword">bt_t</span> *r = (<span class="hljs-keyword">bt_t</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(bt));        assert(r);        r-&gt;key = post[post_len<span class="hljs-number">-1</span>];        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; in_len &amp;&amp; in[i] != r-&gt;key; ++i);        r-&gt;left = bt_solve_from_inpostorder(in, i, post, i);        r-&gt;right = bt_solve_from_inpostorder(in+i+<span class="hljs-number">1</span>, in_len-i<span class="hljs-number">-1</span>,             post+i, post_len-i<span class="hljs-number">-1</span>);        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-keyword">bt_t</span> *bt_solve_from_inpreorder(    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *in, <span class="hljs-keyword">int</span> in_len, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pre, <span class="hljs-keyword">int</span> pre_len)&#123;    <span class="hljs-keyword">if</span> (pre_len &gt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">int</span> i;        <span class="hljs-keyword">bt_t</span> *r = (<span class="hljs-keyword">bt_t</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(bt));        assert(r);        r-&gt;key = pre[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; in_len &amp;&amp; in[i] != r-&gt;key; ++i);        r-&gt;left = bt_solve_from_inpreorder(in, i, pre+<span class="hljs-number">1</span>, i);        r-&gt;right = bt_solve_from_inpreorder(in+i+<span class="hljs-number">1</span>, in_len-i<span class="hljs-number">-1</span>,             pre+<span class="hljs-number">1</span>+i, pre_len-i<span class="hljs-number">-1</span>);        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bt_node_print</span><span class="hljs-params">(<span class="hljs-keyword">bt_t</span> *bt)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, bt-&gt;key);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *in = <span class="hljs-string">&quot;ADEFGHMZ&quot;</span>;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *post = <span class="hljs-string">&quot;AEFDHZMG&quot;</span>;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pre = <span class="hljs-string">&quot;GDAFEMHZ&quot;</span>;    <span class="hljs-keyword">bt_t</span> *bt = bt_solve_from_inpostorder(in, <span class="hljs-number">8</span>, post, <span class="hljs-number">8</span>);    bt_preorder(bt, bt_node_print);    bt_postorder(bt, (<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">bt_t</span> *))<span class="hljs-built_in">free</span>);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);        bt = bt_solve_from_inpreorder(in, <span class="hljs-number">8</span>, pre, <span class="hljs-number">8</span>);    bt_postorder(bt, bt_node_print);    bt_postorder(bt, (<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">bt_t</span> *))<span class="hljs-built_in">free</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>树</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake笔记</title>
    <link href="/2020/10/12/CMake%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/12/CMake%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake笔记"><a href="#CMake笔记" class="headerlink" title="CMake笔记"></a>CMake笔记</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="变量设置与打印"><a href="#变量设置与打印" class="headerlink" title="变量设置与打印"></a>变量设置与打印</h3><p><a href="https://cmake.org/cmake/help/v3.18/command/set.html">set</a>命令设置变量名及其对应值，通过<code>$&#123;变量名&#125;</code>的方式引用变量。<a href="https://cmake.org/cmake/help/v3.18/command/message.html">message</a>可打印信息。</p><pre><code class="hljs CMake"><span class="hljs-keyword">set</span>(VAR_A <span class="hljs-number">100</span>)<span class="hljs-keyword">message</span>(STATUS <span class="hljs-variable">$&#123;VAR_A&#125;</span>)</code></pre><p>输出：</p><pre><code class="hljs Bash">...-- 100...</code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>同大多数编程语言一样，<a href="https://cmake.org/cmake/help/v3.18/command/if.html">if</a>用于条件控制。需要注意的是，cmake中<code>&lt;condition&gt;</code>的写法会使用<code>EQUAL</code>, <code>LESS</code>, <code>LESS_EQUAL</code>等关键字，判定为TRUE的条件可能有所复杂。</p><pre><code class="hljs CMake"><span class="hljs-keyword">if</span>(&lt;condition&gt;)    &lt;commands&gt;<span class="hljs-keyword">elseif</span>(&lt;condition&gt;)    &lt;commands&gt;<span class="hljs-keyword">else</span>()    &lt;commands&gt;<span class="hljs-keyword">endif</span>()</code></pre><h3 id="foreach与list"><a href="#foreach与list" class="headerlink" title="foreach与list"></a>foreach与list</h3><p><a href="https://cmake.org/cmake/help/v3.18/command/list.html">list</a>是cmake中一种类似数组的结构（元素可以不同），<a href="https://cmake.org/cmake/help/v3.18/command/foreach.html">foreach</a>命令则用于遍历操作。</p><pre><code class="hljs CMake"><span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">1</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">2</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">3</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">4</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">5</span>)<span class="hljs-keyword">message</span>(STATUS <span class="hljs-variable">$&#123;LIST_A&#125;</span>)<span class="hljs-keyword">foreach</span>(X IN LISTS LIST_A)    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;X=$&#123;X&#125;&quot;</span>)<span class="hljs-keyword">endforeach</span>()</code></pre><p>输出：</p><pre><code class="hljs Bash">...-- 12345-- X=1-- X=2-- X=3-- X=4-- X=5...</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><a href="https://cmake.org/cmake/help/v3.18/command/function.html">function</a>指令可定义函数。</p><pre><code class="hljs CMake"><span class="hljs-keyword">function</span>(F1 <span class="hljs-keyword">list</span>)    <span class="hljs-keyword">foreach</span>(X IN LISTS <span class="hljs-variable">$&#123;list&#125;</span>)        <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;X=$&#123;X&#125;&quot;</span>)    <span class="hljs-keyword">endforeach</span>()<span class="hljs-keyword">endfunction</span>()<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">1</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">2</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">3</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">4</span>)<span class="hljs-keyword">list</span>(APPEND LIST_A <span class="hljs-number">5</span>)F1(LIST_A)</code></pre><p>输出：</p><pre><code class="hljs Bash">-- X=1-- X=2-- X=3-- X=4-- X=5</code></pre><h2 id="E1-1-Hello-World"><a href="#E1-1-Hello-World" class="headerlink" title="E1.1 Hello World"></a>E1.1 Hello World</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>通过CMake编译、构建一个Hello World程序</li></ul><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><p>最简单的CMake工程目录如下所示</p><pre><code class="hljs shell">.├─ CMakeLists.txt└─ main.cpp</code></pre><p>CMakeLists.txt内容如下</p><pre><code class="hljs CMake"><span class="hljs-keyword">project</span>(CMake_Note)<span class="hljs-keyword">add_executable</span>(main main.cpp)</code></pre><p>main.cpp内容如下</p><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>在工程目录中新建build目录，然后进入build目录下执行<code>cmake ..</code>，再执行<code>cmake --build .</code></p><blockquote><p>Linux下用<code>cmake ..</code>和<code>make</code>指令进行构建</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p><code>project(CMake_Note)</code>指定项目名称，具体语法见<a href="https://cmake.org/cmake/help/v3.18/command/project.html">project</a></p></li><li><p><code>add_executable(main main.cpp)</code>添加一个可执行程序Target，将main.cpp编译为可执行程序，具体语法见<a href="https://cmake.org/cmake/help/v3.18/command/add_executable.html">add_executable</a></p></li></ul><h2 id="E1-2-生成动态库与静态库"><a href="#E1-2-生成动态库与静态库" class="headerlink" title="E1.2 生成动态库与静态库"></a>E1.2 生成动态库与静态库</h2><h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><ul><li>通过CMake生成构建静态库与动态库</li></ul><h3 id="例程-1"><a href="#例程-1" class="headerlink" title="例程"></a>例程</h3><p>在E1.1基础上新增hello.h及hello.cpp文件，其内容分别如下</p><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> HELLO_H_</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HELLO_H_</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *what)</span></span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// HELLO_H_</span></span></code></pre><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;hello.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *what)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s!\n&quot;</span>, what);&#125;</code></pre><p>将CMakeLists.txt与main.cpp分别修改为以下内容</p><pre><code class="hljs CMake"><span class="hljs-keyword">project</span>(CMake_Note)<span class="hljs-keyword">add_library</span>(hello hello.cpp)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main hello)</code></pre><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;hello.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    hello(<span class="hljs-string">&quot;Function&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li><p><code>add_library(hello hello.cpp)</code>添加一个库文件Target，将hello.cpp编译为库文件，具体语法见<a href="https://cmake.org/cmake/help/v3.18/command/add_library.html">add_executable</a></p></li><li><p>使用<code>add_library(hello STATIC hello.cpp)</code>可以强制生成静态库，<code>add_library(hello SHARED hello.cpp)</code>同理。具体见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-buildsystem.7.html#binary-library-types">Binary Library Types</a></p></li><li><p><code>target_link_libraries(main hello)</code>表示将hello链接到main中，具体语法见<a href="https://cmake.org/cmake/help/v3.18/command/target_link_libraries.html">target_link_libraries</a>。需要注意的是，<code>target_link_libraries</code>在添加Target之后，在本例子中的体现是该语句在<code>add_executable(main main.cpp)</code>之后。</p></li></ul><h2 id="E1-3-改变输出文件路径"><a href="#E1-3-改变输出文件路径" class="headerlink" title="E1.3 改变输出文件路径"></a>E1.3 改变输出文件路径</h2><h3 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h3><ul><li>将可执行程序与库文件分别输出到bin与lib文件夹</li></ul><h3 id="例程-2"><a href="#例程-2" class="headerlink" title="例程"></a>例程</h3><p>在E1.2基础上将CMakeLists.txt修改为以下内容</p><pre><code class="hljs CMake"><span class="hljs-keyword">project</span>(CMake_Note)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">add_library</span>(hello hello.cpp)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main hello)</code></pre><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><ul><li><p>基本上，<code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code>指定可执行文件的输出路径，<code>CMAKE_LIBRARY_OUTPUT_DIRECTORY</code>指定库文件的输出路径。</p></li><li><p><code>CMAKE_BINARY_DIR</code>表示执行<code>cmake</code>命令时所在的路径，在本例子中为<code>build</code>目录。还有一个<code>CMAKE_SOURCE_DIR</code>表示工程源码路径，在本例子中为<code>CMakeLists.txt</code>所在路径。另外还有两个类似的目录，<code>CMAKE_CURRENT_BINARY_DIR</code>与<code>CMAKE_CURRENT_SOURCE_DIR</code>，当cmake工程发生嵌套时，不带CURRENT的变量指顶层CMake工程，带CURRENT的则指当前CMake工程。具体定义见<a href="https://cmake.org/cmake/help/v3.18/variable/CMAKE_SOURCE_DIR.html#variable:CMAKE_SOURCE_DIR">CMAKE_SOURCE_DIR</a>。</p></li><li><p>不同平台下，输出文件的路径由不同的变量控制可能不同。例如window下与linux下的动态库文件，在window下，动态库输出路径由<code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code>指定，linux下则由<code>CMAKE_LIBRARY_OUTPUT_DIRECTORY</code>指定，具体解释见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-buildsystem.7.html#output-artifacts">Output Artifacts</a></p></li><li><p>window平台下，cmake可能会根据不同的构建类型（Debug或Release）将输出文件归类到对应类型的文件夹下，为避免该情况，可将上述CMakeLists.txt新增的内容改为</p>  <pre><code class="hljs CMake"><span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)</code></pre><p>  参考<a href="https://stackoverflow.com/questions/543203/cmake-runtime-output-directory-on-windows">CMake Runtime Output Directory On Windows</a></p></li></ul><h2 id="E1-4-分离可执行程序与库文件"><a href="#E1-4-分离可执行程序与库文件" class="headerlink" title="E1.4 分离可执行程序与库文件"></a>E1.4 分离可执行程序与库文件</h2><h3 id="目的-3"><a href="#目的-3" class="headerlink" title="目的"></a>目的</h3><ul><li>了解如何使用add_subdirectory直接将库的源码工程导入到应用（APP）工程，了解CMake的Target概念</li></ul><h3 id="例程-3"><a href="#例程-3" class="headerlink" title="例程"></a>例程</h3><p>在E1.3基础上分离可执行程序工程与库工程，工程目录如下</p><pre><code class="hljs shell">.├─ CMakeLists.txt├─ hello│   ├─ CMakeLists.txt│   ├─ hello.h│   └─ hello.cpp└─ main.cpp</code></pre><p>CMakeLists.txt内容为</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(MAIN)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">add_subdirectory</span>(hello)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main hello)</code></pre><p>hello/CMakeLists.txt内容为</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(HELLO)<span class="hljs-keyword">add_library</span>(hello hello.cpp)<span class="hljs-keyword">target_include_directories</span>(hello     PUBLIC         $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>&gt;)</code></pre><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><ul><li><p>hello文件夹中本身是一个独立的CMake工程（HELLO工程）</p></li><li><p><code>add_subdirectory(lib)</code>将hello库的CMake源码工程直接导入到当前工程（MAIN工程）中，所以当前工程可以直接引用到<code>hello</code>Target，<code>add_executable</code>，<code>add_library</code>都能产生Target，如HELLO工程中产生了<code>hello</code>Target，MAIN工程中产生了<code>main</code>Target，且<code>main</code>依赖<code>hello</code>。<a href="https://cmake.org/cmake/help/v3.18/command/add_subdirectory.html">add_subdirectory</a>是引用外部库的方式之一（通过直接引入库源码的方式）。</p></li><li><p><code>target_include_directories(hello $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;)</code>将指定目录绑定到指定Target中。在HELLO工程中，<code>target_include_directories</code>将hello库的源码目录（即<code>CMAKE_CURRENT_SOURCE_DIR</code>-&gt;hello）绑定到<code>hello</code>Target上，所以当链接<code>hello</code>Target时，<code>main</code>Target也以该目录作为include目录，所以main.cpp中能直接<code>#include &quot;hello.h&quot;</code>。具体见<a href="https://cmake.org/cmake/help/v3.18/command/target_include_directories.html">target_include_directories</a>。在HELLO工程中，<code>target_include_directories</code>使用了PUBLIC进行修饰，PUBLIC后的目录可以对外传递。当指定为PRIVATE时，目录不会对外传递，所以这种情况下，main.cpp中的<code>#include &quot;hello.h&quot;</code>将报出找不到头文件的错误。除了PUBLIC外，例子中还用了<code>$&lt;BUILD_INTERFACE:$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&gt;</code>进行修饰，表示只有在构建（Build）时才会传递指定的目录。所以，当MAIN工程不是直接包含HELLO工程源码来引用<code>hello</code>Target时（如hello库已经以二进制的形式安装在本地环境中，此时需要使用<code>$&lt;INSTALL_INTERFACE:...&gt;</code>），该指定目录不会被传递给<code>main</code>Target。具体见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-generator-expressions.7.html#output-related-expressions">Output-Related Expressions</a></p><blockquote><p><strong>Target自身带有某些属性，如该Target包含了哪些include目录，链接了哪些Target。某些Target属性会传递到引用该Target的Target上</strong>。</p></blockquote></li></ul><h2 id="E1-5-configure-file用法"><a href="#E1-5-configure-file用法" class="headerlink" title="E1.5 configure_file用法"></a>E1.5 configure_file用法</h2><h3 id="目的-4"><a href="#目的-4" class="headerlink" title="目的"></a>目的</h3><ul><li>熟悉模板配置，实现通过CMake变量控制生成不同的源文件</li></ul><h3 id="例程-4"><a href="#例程-4" class="headerlink" title="例程"></a>例程</h3><p>在E1.4中的hello目录下添加config.h.in文件，工程目录如下</p><pre><code class="hljs shell">.├─ CMakeLists.txt├─ hello│   ├─ CMakeLists.txt│   ├─ config.h.in│   ├─ hello.h│   └─ hello.cpp└─ main.cpp</code></pre><p>hello/config.h.in</p><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _HELLO_CONFIG_H_</span><span class="hljs-meta">#cmakedefine HELLO_VERSION <span class="hljs-meta-string">&quot;@HELLO_VERSION@&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// _HELLO_CONFIG_H_</span></span></code></pre><p>修改hello/CMakeLists.txt文件为</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(HELLO)<span class="hljs-keyword">set</span>(HELLO_VERSION_MAJOR <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION_MINOR <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION_PATCH <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION <span class="hljs-variable">$&#123;HELLO_VERSION_MAJOR&#125;</span>.<span class="hljs-variable">$&#123;HELLO_VERSION_MINOR&#125;</span>.<span class="hljs-variable">$&#123;HELLO_VERSION_PATCH&#125;</span>)<span class="hljs-keyword">configure_file</span>(config.h.in <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/config.h&quot;</span> @ONLY)<span class="hljs-keyword">add_library</span>(hello hello.cpp)<span class="hljs-keyword">target_include_directories</span>(hello     PUBLIC         $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>&gt;    PRIVATE        $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>&gt;)</code></pre><p>修改hello/hello.cpp文件为</p><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;hello.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *what)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s!, version: %s\n&quot;</span>, what, HELLO_VERSION);&#125;</code></pre><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><ul><li><p><a href="https://cmake.org/cmake/help/v3.18/command/configure_file.html">configure_file</a>将config.h.in模板文件生成为config.h文件，其内容最终如下所示</p>  <pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _HELLO_CONFIG_H_</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HELLO_VERSION <span class="hljs-meta-string">&quot;1.1.1&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// _HELLO_CONFIG_H_</span></span></code></pre></li><li><p>由于config.h生成在<code>CMAKE_CURRENT_BINARY_DIR</code>目录中，故<code>target_include_directories</code>中需新增了一个include目录，并且设置为PRIVATE，防止该include目录传递到其他Target上。</p></li></ul><h2 id="E1-6-直接引用二进制库"><a href="#E1-6-直接引用二进制库" class="headerlink" title="E1.6 直接引用二进制库"></a>E1.6 直接引用二进制库</h2><h3 id="目的-5"><a href="#目的-5" class="headerlink" title="目的"></a>目的</h3><ul><li>了解CMake直接引用二进制库的方法</li></ul><h3 id="例程-5"><a href="#例程-5" class="headerlink" title="例程"></a>例程</h3><p>在E1.5的基础上，新建cmake文件，并将之前生成的二进制库和hello.h拷贝到其中。工程目录如下</p><pre><code class="hljs shell">.├─ CMakeLists.txt├─ hello # 此目录在本工程中无作用├─ cmake│   ├─ hello.h│   └─ hello.lib # linux下可能会其他类型的文件，如*.so└─ main.cpp</code></pre><p>修改CMakeLists.txt为</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(MAIN)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">include_directories</span>(cmake)<span class="hljs-keyword">link_directories</span>(cmake)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main hello)</code></pre><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><ul><li><p><code>include_directories(cmake)</code>指定了MAIN工程的include文件夹，使得CMake在构建、编译时，去这些目录下查找相应的头文件。具体用法见<a href="https://cmake.org/cmake/help/v3.18/command/include_directories.html">include_directories</a></p></li><li><p><code>link_directories(cmake)</code>指定MAIN工程所依赖的库的路径，使得CMake在构建、编译时，去这些目录下查找需要的库。具体用法见<a href="https://cmake.org/cmake/help/v3.18/command/include_directories.html">link_directories</a></p></li></ul><h2 id="E1-7-通过Module模式的find-package引用二进制库"><a href="#E1-7-通过Module模式的find-package引用二进制库" class="headerlink" title="E1.7 通过Module模式的find_package引用二进制库"></a>E1.7 通过Module模式的find_package引用二进制库</h2><h3 id="目的-6"><a href="#目的-6" class="headerlink" title="目的"></a>目的</h3><ul><li><p>了解通过Module模式的find_package引用二进制库</p></li><li><p>了解find_package的用法</p></li><li><p>了解find_package的module模式</p></li></ul><h3 id="例程-6"><a href="#例程-6" class="headerlink" title="例程"></a>例程</h3><p>在E1.6的基础上，在cmake文件夹中新增Findhello.cmake文件，工程目录如下</p><pre><code class="hljs shell">.├─ CMakeLists.txt├─ hello # 此目录在本工程中无作用├─ cmake│   ├─ Findhello.cmake│   ├─ hello.h│   └─ hello.lib # linux下可能会其他类型的文件，如*.so└─ main.cpp</code></pre><p>cmake/Findhello.cmake</p><pre><code class="hljs CMake"><span class="hljs-keyword">find_path</span>(HELLO_INCLUDES hello.h <span class="hljs-variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>)<span class="hljs-keyword">find_library</span>(HELLO_LIBRARIES hello.lib <span class="hljs-variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>)<span class="hljs-keyword">if</span>(HELLO_INCLUDES)    <span class="hljs-keyword">set</span>(hello_FOUND <span class="hljs-number">1</span>)<span class="hljs-keyword">endif</span>()</code></pre><p>修改CMakeLists.txt为</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(main)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">list</span>(APPEND CMAKE_MODULE_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake)<span class="hljs-keyword">find_package</span>(hello)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main <span class="hljs-variable">$&#123;HELLO_LIBRARIES&#125;</span>)<span class="hljs-keyword">target_include_directories</span>(main PRIVATE <span class="hljs-variable">$&#123;HELLO_INCLUDES&#125;</span>)</code></pre><h3 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h3><ul><li><p><code>find_package(hello)</code>根据<a href="https://cmake.org/cmake/help/v3.18/variable/CMAKE_MODULE_PATH.html">CMAKE_MODULE_PATH</a>中指定的路径找到<code>Findhello.cmake</code>文件，并从该文件中获取hello库相关的构建信息。具体用法见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-packages.7.html#find-module-packages">find-module-packages</a>。</p></li><li><p><a href="https://cmake.org/cmake/help/v3.18/variable/CMAKE_CURRENT_LIST_DIR.html">CMAKE_CURRENT_LIST_DIR</a>指当前被处理的cmake文件所在目录。</p></li><li><p><code>find_path(HELLO_INCLUDES hello.h $&#123;CMAKE_CURRENT_LIST_DIR&#125;)</code>在给定目录下查找某个文件，如果找到便将该目录赋值给指定变量，在本例子中指在<code>$&#123;CMAKE_CURRENT_LIST_DIR&#125;</code>指定的目录下查找<code>hello.h</code>文件，如果找到则赋值给<code>HELLO_INCLUDES</code>变量。具体用法见<a href="https://cmake.org/cmake/help/v3.18/command/find_path.html">find_path</a></p></li><li><p><code>find_library(HELLO_LIBRARIES hello.lib $&#123;CMAKE_CURRENT_LIST_DIR&#125;)</code>的用法和<code>find_path</code>的类似，只是被赋值的变量中包含的是库文件本身，而非库文件所在的目录。具体用法见<a href="https://cmake.org/cmake/help/v3.18/command/find_library.html">find_library</a></p></li><li><p>CMake Module本身是一系列FindXXX.cmake文件，这些文件包含了库的信息（如include目录，library所在目录等），通过这些FindXXX.cmake文件和find_package命令，可以解耦引用了库的cmake工程（即应用工程中不显式存在库的目录信息）。当库稳定后，库的维护者甚至可以向cmake添加自己制作的库的FindXXX.cmake文件，如此随cmake部署时自动部署。一些随cmake安装时附带的见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-modules.7.html">Moudles</a>。</p></li></ul><h2 id="E1-8-创建Config-file-Package"><a href="#E1-8-创建Config-file-Package" class="headerlink" title="E1.8 创建Config-file Package"></a>E1.8 创建Config-file Package</h2><h3 id="目的-7"><a href="#目的-7" class="headerlink" title="目的"></a>目的</h3><ul><li><p>了解CMake的<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-packages.7.html#config-file-packages">Config-file Package</a></p></li><li><p>了解通过Config模式的find_package引用二进制库</p></li></ul><h3 id="例程-7"><a href="#例程-7" class="headerlink" title="例程"></a>例程</h3><p>工程目录</p><pre><code class="hljs shell">. # main 工程├─ CMakeLists.txt├─ hello # hello 工程│   ├─ CMakeLists.txt│   ├─ cmake│   │   ├─ config.h.in│   │   ├─ hello-config-version.cmake.in│   │   └─ hello-config.cmake.in│   ├─ hello.h│   └─ hello.cpp├─ install└─ main.cpp</code></pre><p>hello/CMakeLists.txt</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(HELLO)<span class="hljs-keyword">set</span>(HELLO_VERSION_MAJOR <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION_MINOR <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION_PATCH <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_VERSION <span class="hljs-variable">$&#123;HELLO_VERSION_MAJOR&#125;</span>.<span class="hljs-variable">$&#123;HELLO_VERSION_MINOR&#125;</span>.<span class="hljs-variable">$&#123;HELLO_VERSION_PATCH&#125;</span>)<span class="hljs-keyword">configure_file</span>(cmake/config.h.in <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span> @ONLY)<span class="hljs-keyword">configure_file</span>(cmake/hello-config-version.cmake.in <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/hello-config-version.cmake&quot;</span> @ONLY)<span class="hljs-keyword">configure_file</span>(cmake/hello-config.cmake.in <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/hello-config.cmake&quot;</span> @ONLY)<span class="hljs-keyword">add_library</span>(hello hello.cpp)<span class="hljs-keyword">target_include_directories</span>(hello     PUBLIC         $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>&gt;        $&lt;INSTALL_INTERFACE:<span class="hljs-keyword">include</span>/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>&gt;    PRIVATE        $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>&gt;)<span class="hljs-keyword">install</span>(TARGETS hello     <span class="hljs-keyword">EXPORT</span> hello    DESTINATION lib/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-keyword">install</span>(FILES hello.h DESTINATION <span class="hljs-keyword">include</span>/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>/<span class="hljs-variable">$&#123;HELLO_INCLUDE_PREFIX&#125;</span>)<span class="hljs-keyword">install</span>(FILES <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/hello-config.cmake&quot;</span> DESTINATION lib/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-keyword">install</span>(FILES <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/hello-config-version.cmake&quot;</span> DESTINATION lib/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-keyword">install</span>(<span class="hljs-keyword">EXPORT</span> hello DESTINATION lib/hello-<span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-comment"># 需要安装NSIS</span><span class="hljs-comment"># cpack -C Debug</span><span class="hljs-keyword">set</span>(CPACK_GENERATOR NSIS)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_NAME <span class="hljs-string">&quot;hello&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_VENDOR <span class="hljs-string">&quot;No vendor&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_DESCRIPTION_SUMMARY <span class="hljs-string">&quot;No description&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_VERSION <span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_INSTALL_DIRECTORY <span class="hljs-string">&quot;/usr/local&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_NSIS_MODIFY_PATH <span class="hljs-keyword">ON</span>)<span class="hljs-keyword">include</span>(CPack)</code></pre><p>hello/cmake/hello-config.cmake.in</p><pre><code class="hljs CMake"><span class="hljs-keyword">list</span>(APPEND CMAKE_MODULE_PATH <span class="hljs-variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>)<span class="hljs-keyword">include</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/hello.cmake)<span class="hljs-keyword">set</span>(hello_FOUND <span class="hljs-number">1</span>)<span class="hljs-keyword">set</span>(HELLO_LIBRARIES hello)</code></pre><p>hello/cmake/hello-config-version.cmake.in，其中被@@包围的部分为模板变量，最后会被configure_file替换为实际值。</p><pre><code class="hljs CMake"><span class="hljs-keyword">set</span>(PACKAGE_VERSION @HELLO_VERSION@)<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;$&#123;PACKAGE_FIND_VERSION_MAJOR&#125;&quot;</span> <span class="hljs-keyword">EQUAL</span> <span class="hljs-string">&quot;@HELLO_VERSION_MAJOR@&quot;</span>)    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;$&#123;PACKAGE_FIND_VERSION_MINOR&#125;&quot;</span> <span class="hljs-keyword">EQUAL</span> <span class="hljs-string">&quot;@HELLO_VERSION_MINOR@&quot;</span>)        <span class="hljs-keyword">set</span>(PACKAGE_VERSION_EXACT <span class="hljs-keyword">TRUE</span>)    <span class="hljs-keyword">elseif</span>(<span class="hljs-string">&quot;$&#123;PACKAGE_FIND_VERSION_MINOR&#125;&quot;</span> <span class="hljs-keyword">LESS</span> <span class="hljs-string">&quot;@HELLO_VERSION_MINOR@&quot;</span>)        <span class="hljs-keyword">set</span>(PACKAGE_VERSION_COMPATIBLE <span class="hljs-keyword">TRUE</span>)    <span class="hljs-keyword">else</span>()        <span class="hljs-keyword">set</span>(PACKAGE_VERSION_UNSUITABLE <span class="hljs-keyword">TRUE</span>)    <span class="hljs-keyword">endif</span>()<span class="hljs-keyword">elseif</span>(<span class="hljs-string">&quot;$&#123;PACKAGE_FIND_VERSION&#125;&quot;</span> <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Using hello @HELLO_VERSION@&quot;</span>)    <span class="hljs-keyword">set</span>(PACKAGE_VERSION_COMPATIBLE <span class="hljs-keyword">TRUE</span>)<span class="hljs-keyword">else</span>()    <span class="hljs-keyword">set</span>(PACKAGE_VERSION_UNSUITABLE <span class="hljs-keyword">TRUE</span>)<span class="hljs-keyword">endif</span>()</code></pre><p>进入hello目录下，新建build目录并进入，依次执行<code>cmake ..</code>，<code>cmake --build .</code>,<code>cpack -C Debug</code>，双击生成的<code>hello-1.1.1-win32.exe</code>安装包，将其安装到install目录下。安装完毕后会有如下目录</p><pre><code class="hljs shell">....  ├─ install│   ├─ include│   │   └─ hello-1.1.1│   │       └─ hello.h│   └─ lib│       └─ hello-1.1.1│           ├─ hello.lib│           ├─ hello.cmake # 自动生成的Target导出数据│           ├─ hello-config.cmake│           └─ hello-config-version.cmake...</code></pre><p>CMakeLists.txt</p><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.18</span>)<span class="hljs-keyword">project</span>(CMake_Note)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/bin&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/lib&quot;</span>)<span class="hljs-keyword">list</span>(APPEND CMAKE_PREFIX_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">install</span>)<span class="hljs-keyword">find_package</span>(hello)<span class="hljs-keyword">add_executable</span>(main main.cpp)<span class="hljs-keyword">target_link_libraries</span>(main <span class="hljs-variable">$&#123;HELLO_LIBRARIES&#125;</span>)</code></pre><p>返回main工程，用CMake构建</p><h3 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h3><ul><li><p><a href="https://cmake.org/cmake/help/v3.18/command/install.html">install</a>用于安装、导出cmake Target。<code>install(TARGETS hello EXPORT hello DESTINATION lib/hello-$&#123;HELLO_VERSION&#125;)</code>创建了hello工程中需要导出的cmake Target，这些Target记录在自动生成的hello.cmake文件中（hello.cmake的hello来源于EXPORT后头的hello，TARGETS后的hello指向的是add_library时产生的hello）。<code>install(EXPORT hello DESTINATION lib/hello-$&#123;HELLO_VERSION&#125;)</code>则实际和<code>install(FILES ...)</code>一样，将指定的文件拷贝到对应的目录中。</p></li><li><p>cpack为cmake提供的跨平台打包工具，其间接调用各个平台下的工具对软件库进行打包（如本例子中使用window下的NSIS）。具体用法见<a href="https://cmake.org/cmake/help/v3.18/manual/cpack.1.html">cpack</a>。</p><blockquote><p>可使用下面的片段生成deb包</p>  <pre><code class="hljs CMake"><span class="hljs-keyword">set</span>(CPACK_GENERATOR <span class="hljs-string">&quot;DEB&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_NAME <span class="hljs-string">&quot;hello&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_VENDOR <span class="hljs-string">&quot;No vendor&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_DESCRIPTION_SUMMARY <span class="hljs-string">&quot;No description&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_VERSION <span class="hljs-variable">$&#123;HELLO_VERSION&#125;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_INSTALL_DIRECTORY <span class="hljs-string">&quot;/usr/local&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_RPM_PACKAGE_GROUP <span class="hljs-string">&quot;group name&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_RPM_PACKAGE_LICENSE <span class="hljs-string">&quot;license&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_PACKAGE_CONTACT <span class="hljs-string">&quot;email or phone number&quot;</span>)<span class="hljs-keyword">set</span>(CPACK_DEBIAN_PACKAGE_MAINTAINER <span class="hljs-string">&quot;maintainer name&quot;</span>)<span class="hljs-keyword">include</span>(CPack)</code></pre></blockquote></li><li><p>build interface 与 install interface。Target的两种接口，Target具有某些属性，如include目录。在本例程中main Target依赖于hello Target。hello Target的公开的include属性中分别指定了build时的include目录和install后的include目录，两个include目录是不同的。当main工程通过<strong>直接包含hello工程源码来引用hello Target</strong>时，hello Target的include属性中具有<code>$&lt;BUILD_INTERFACE:$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&gt;</code>指定的include目录。当main工程通过<strong>find_package的方式引用已经安装好的hello Target</strong>时，hello Target的include属性中具有<code>$&lt;INSTALL_INTERFACE:include/hello-$&#123;HELLO_VERSION&#125;&gt;</code>指定的include目录。</p><blockquote><p>重点区别这两种interface，体会不同interface的作用</p></blockquote></li><li><p>Target的通过install命令导出，将cmake编译过程记录在某个文件中，跟随库一起发布。其他某个A工程使用find_package引用该库时，库的编译过程数据将作为输入，传递到A工程的构建过程。</p></li><li><p>hello-config-version.cmake.in文件是cmake的包版本文件（<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-packages.7.html#package-version-file">Package Version File</a>），其命名形式一般为foo-config-version.cmake或FooConfigVersion.cmake（其中Foo为包名）。该文件一般随着包一起部署（安装），在该文件中可以通过<code>PACKAGE_FIND_VERSION</code>、<code>PACKAGE_FIND_VERSION_MAJOR</code>、<code>PACKAGE_FIND_VERSION_MINOR</code>、<code>PACKAGE_VERSION_COMPATIBLE</code>等变量来对包进行版本管理。一般在某个工程中find_package(Foo 1.1.1)后，<code>PACKAGE_FIND_VERSION</code>、<code>PACKAGE_FIND_VERSION_MAJOR</code>、<code>PACKAGE_FIND_VERSION_MINOR</code>等变量会被赋值为对应值，在判定兼容性后，设置<code>PACKAGE_VERSION_COMPATIBLE</code>为TRUE或FALSE来控制包是否可用。</p></li><li><p>hello-config.cmake.in文件是cmake的包配置文件，一般通过<code>install(EXPORT)</code>命令导出Target后会自动生成一个包配置文件，然后用hello-config.cmake.in直接包含该文件即可。本例中自动生成的文件为hello.cmake。更具体的描述见<a href="https://cmake.org/cmake/help/v3.18/manual/cmake-packages.7.html#creating-a-package-configuration-file">Creating a Package Configuration File</a></p></li></ul><h2 id="一些需求"><a href="#一些需求" class="headerlink" title="一些需求"></a>一些需求</h2><h3 id="仅头文件库"><a href="#仅头文件库" class="headerlink" title="仅头文件库"></a>仅头文件库</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>创建一个仅包含头文件的库</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre><code class="hljs CMake"><span class="hljs-keyword">add_library</span>(library_a INTERFACE)<span class="hljs-keyword">target_include_directories</span>(library_a     INTERFACE        $&lt;BUILD_INTERFACE:<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>&gt;        $&lt;INSTALL_INTERFACE:<span class="hljs-keyword">include</span>/library_a-<span class="hljs-variable">$&#123;LIBRARY_A_VERSION&#125;</span>&gt;)</code></pre><h3 id="拷贝库的DLL到可执行目标目录"><a href="#拷贝库的DLL到可执行目标目录" class="headerlink" title="拷贝库的DLL到可执行目标目录"></a>拷贝库的DLL到可执行目标目录</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><p>window平台下，应用工程引用某个动态库后，希望能够通过某种方式自动将DLL拷贝到可执行文件所在的目录下</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>在库的xxx-config.cmake.in中定义以下函数，供外部工程调用</p><pre><code class="hljs CMake"><span class="hljs-keyword">function</span>(XXX_COPY_DLL <span class="hljs-keyword">target</span>)    <span class="hljs-keyword">set</span>(XXX_DLL_FILE  <span class="hljs-variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/xxx.dll CACHE INTERNAL <span class="hljs-string">&quot;XXX_DLL_FILE&quot;</span>)    <span class="hljs-keyword">add_custom_command</span>(<span class="hljs-keyword">TARGET</span> <span class="hljs-variable">$&#123;target&#125;</span> POST_BUILD        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E echo copy <span class="hljs-variable">$&#123;XXX_DLL_FILE&#125;</span> to $&lt;TARGET_FILE_DIR:<span class="hljs-variable">$&#123;target&#125;</span>&gt;        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="hljs-variable">$&#123;XXX_DLL_FILE&#125;</span> $&lt;TARGET_FILE_DIR:<span class="hljs-variable">$&#123;target&#125;</span>&gt;    )<span class="hljs-keyword">endfunction</span>()</code></pre><p>在应用工程CMakeLists.txt调用XXX_COPY_DLL</p><pre><code class="hljs CMake"><span class="hljs-keyword">add_executable</span>(app ...)<span class="hljs-keyword">target_link_libraries</span>(app xxx)XXX_COPY_DLL(app)</code></pre><h3 id="为已发布的库文件创建Target"><a href="#为已发布的库文件创建Target" class="headerlink" title="为已发布的库文件创建Target"></a>为已发布的库文件创建Target</h3><h4 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h4><p>在没有库源码的情况下针对库创建一个cmake Target</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建一个fake.cpp文件，实现空接口。构建完成之后用实际的库文件替换生成的库文件。</p><pre><code class="hljs CMake"><span class="hljs-keyword">add_library</span>(real SHARED fake.cpp)<span class="hljs-keyword">if</span>(UNIX)    <span class="hljs-keyword">add_custom_target</span>(cheat ALL        <span class="hljs-keyword">COMMAND</span> cp <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-variable">$&#123;ARCH&#125;</span>/real.so <span class="hljs-variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/real.so        <span class="hljs-comment">#</span>        <span class="hljs-comment"># 这里不能简单的用c. copy之后, ldd查看测试程序的依赖时显示real路径有问题</span>        <span class="hljs-comment"># 不知道为什么copy之后, rpath就变了</span>        <span class="hljs-comment">#</span>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-keyword">install</span> <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-variable">$&#123;ARCH&#125;</span>/real.so <span class="hljs-variable">$&#123;CMAKE_LIBRARY_OUTPUT_DIRECTORY&#125;</span>/real.so        <span class="hljs-keyword">COMMAND</span> rm <span class="hljs-variable">$&#123;CMAKE_LIBRARY_OUTPUT_DIRECTORY&#125;</span>/real.so        <span class="hljs-keyword">COMMAND</span> ln <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-variable">$&#123;ARCH&#125;</span>/real.so <span class="hljs-variable">$&#123;CMAKE_LIBRARY_OUTPUT_DIRECTORY&#125;</span>/real.so        DEPENDS real <span class="hljs-comment"># POST BUILD作用</span>    )         <span class="hljs-keyword">elseif</span>(WIN32)    <span class="hljs-keyword">add_custom_command</span>(<span class="hljs-keyword">TARGET</span> controlcan POST_BUILD        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E             copy_if_different <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-variable">$&#123;ARCH&#125;</span>/real.dll <span class="hljs-variable">$&#123;CMAKE_RUNTIME_OUTPUT_DIRECTORY&#125;</span>/real.dll        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E             copy_if_different <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-variable">$&#123;ARCH&#125;</span>/real.lib <span class="hljs-variable">$&#123;CMAKE_ARCHIVE_OUTPUT_DIRECTORY&#125;</span>/real.lib    )<span class="hljs-keyword">endif</span>()</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cmake.org/cmake/help/v3.18/index.html#reference-manuals">CMake Reference Manual</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cmake-packages.7.html">CMake Package</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cmake-variables.7.html">CMake Variables</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cmake-buildsystem.7.html">CMake Build System</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cmake-modules.7.html">CMake Modules</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cmake-commands.7.html">CMake Command</a><br><a href="https://cmake.org/cmake/help/v3.18/manual/cpack.1.html">CPack</a><br><a href="https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/">It’s Time To Do CMake Right</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2>]]></content>
    
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>编译构建工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO入门</title>
    <link href="/2020/10/11/HEXO%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/11/HEXO%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="HEXO笔记"><a href="#HEXO笔记" class="headerlink" title="HEXO笔记"></a>HEXO笔记</h1><p><a href="https://hexo.io/zh-cn/">HEXO</a><br><a href="https://hexo.io/zh-cn/docs/">HEXO docs</a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>部署文件会生成到public目录下，注释掉.gitignore中public/，使其一同被push到仓库中。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>创建文章时，文章最上方最上方以<code>---</code>分隔的区域被称为Front-matter，Front-matter用来指定个别文件的变量。举例来说：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><span class="hljs-meta">---</span></code></pre><h2 id="为文章添加标签"><a href="#为文章添加标签" class="headerlink" title="为文章添加标签"></a>为文章添加标签</h2><p>在Front-matter的tags下添加，样例：</p><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span>- PS3- Games</code></pre><h2 id="主题：hexo-theme-fluid"><a href="#主题：hexo-theme-fluid" class="headerlink" title="主题：hexo-theme-fluid"></a>主题：hexo-theme-fluid</h2><p><a href="https://hexo.fluid-dev.com/">HEXO Theme Fluid</a><br><a href="https://github.com/fluid-dev/hexo-theme-fluid">HEXO Theme Fluid Github</a></p><h3 id="创建简历页"><a href="#创建简历页" class="headerlink" title="创建简历页"></a>创建简历页</h3><ol><li><p>在<code>themes/hexo-theme-fluid/_config.yml</code>中</p><ol><li><p>搜索<code>nav</code>，在about上头添加一行</p> <pre><code class="hljs yaml"><span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;resume&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/resume/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span> &#125;</code></pre></li><li><p>添加如下内容</p><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 简历页</span><span class="hljs-comment"># Resume Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">resume:</span>    <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>    <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span>  <span class="hljs-comment"># available: 0 - 100</span>    <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># available: 0 - 1.0</span>    <span class="hljs-attr">subtitle:</span>  <span class="hljs-comment"># 打字机内容</span></code></pre></li></ol></li><li><p>在<code>themes/hexo-theme-fluid/languages/zh-CN.yml</code>中搜索添加</p> <pre><code class="hljs yaml"><span class="hljs-attr">resume:</span>  <span class="hljs-attr">title:</span> <span class="hljs-string">简历</span>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">简历</span></code></pre></li><li><p>在<a href="https://hexo.fluid-dev.com/docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">内置社交图标</a>中<br> 查找合适的图标，此处选<code>icon-addrcard</code></p></li><li><p>添加resume页</p><ol><li><p>执行<code>hexo new page resume</code>创建页</p></li><li><p>复制<code>themes/hexo-theme-fluid/layout/about.ejs</code>并改名为<code>resume.ejs</code>创建resume页的layout</p></li><li><p>修改<code>resume.ejs</code>为以下内容</p> <pre><code class="hljs ejs">&lt;%page.layout &#x3D; &quot;resume&quot;page.title &#x3D; theme.resume.title || __(&#39;resume.title&#39;)page.subtitle &#x3D; theme.resume.subtitle || __(&#39;resume.subtitle&#39;)page.banner_img &#x3D; theme.resume.banner_imgpage.banner_img_height &#x3D; theme.resume.banner_img_heightpage.banner_mask_alpha &#x3D; theme.resume.banner_mask_alpha%&gt;&lt;div class&#x3D;&quot;mt-5 markdown-body&quot;&gt;    &lt;%- page.content %&gt;&lt;&#x2F;div&gt;</code></pre></li><li><p>在<code>source/resume/index.md</code>中引用新添加的 <strong>resume</strong> layout</p> <pre><code class="hljs html">---title: resumedate: 2020-10-12 10:06:24layout: resume---</code></pre></li><li><p>在<code>source/resume/index.md</code>编辑简历，实验如下</p> <pre><code class="hljs vala"><span class="hljs-meta"># 简历</span></code></pre></li></ol></li></ol><h3 id="网站统计"><a href="#网站统计" class="headerlink" title="网站统计"></a>网站统计</h3><p>以站长身份注册一个<a href="https://tongji.baidu.com/">百度统计</a>账户，登陆后进入管理页面，新增站点。新增完毕后，在百度生成的安装代码中找到对应的key（hs?之后的字符串），将该key放到主题_config.yml中的<a href="https://hexo.fluid-dev.com/docs/guide/#%E7%BD%91%E9%A1%B5%E7%BB%9F%E8%AE%A1">web_analytics</a>部分，在<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%B1%95%E7%A4%BA-pv-%E4%B8%8E-uv-%E7%BB%9F%E8%AE%A1">footer</a>中启用显示访问量的工具，在<a href="https://hexo.fluid-dev.com/docs/guide/#%E6%97%A5%E6%9C%9F-%E5%AD%97%E6%95%B0-%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF-%E9%98%85%E8%AF%BB%E6%95%B0">post</a>启用每篇文章的阅读量显示。</p><h3 id="添加Valine评论"><a href="#添加Valine评论" class="headerlink" title="添加Valine评论"></a>添加Valine评论</h3><ol><li><p><a href="https://valine.js.org/quickstart.html">注册LeanCloud</a>。</p><blockquote><p>需实名认证</p></blockquote></li><li><p>创建应用并获取<code>App ID</code>和<code>App Key</code></p></li><li><p>在主题_config.yml的<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">post comment</a>中启用评论，并设置<code>type</code>为<code>valine</code>，在<code>valine</code>项目中配置步骤3中获取的<code>App ID</code>和<code>App Key</code>。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南</a></p></li><li><p><a href="https://hexo.fluid-dev.com/docs/example/">操作示例</a></p></li><li><p><a href="https://hexo.fluid-dev.com/docs/icon/">图标用法</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
